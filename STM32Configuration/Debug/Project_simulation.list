
Project_simulation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ad4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004be4  08004be4  00014be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c6c  08004c6c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004c6c  08004c6c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c6c  08004c6c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c6c  08004c6c  00014c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c70  08004c70  00014c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004c74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  2000005c  08004cd0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08004cd0  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d35e  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002003  00000000  00000000  0002d426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  0002f430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aae  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001818c  00000000  00000000  00030c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f33a  00000000  00000000  00048e1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c7fb  00000000  00000000  00058154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f38  00000000  00000000  000e4950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000e8888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004bcc 	.word	0x08004bcc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	08004bcc 	.word	0x08004bcc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <send_Idata>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_Idata(uint8_t data) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(10);
 8000946:	200a      	movs	r0, #10
 8000948:	f000 fdb6 	bl	80014b8 <HAL_Delay>
	int temp[4];

	for (int i = 0; i < 4; i++) {
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
 8000950:	e00e      	b.n	8000970 <send_Idata+0x34>

		temp[i] = data % 2;
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	f003 0201 	and.w	r2, r3, #1
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	3320      	adds	r3, #32
 800095e:	443b      	add	r3, r7
 8000960:	f843 2c14 	str.w	r2, [r3, #-20]
		data = data >> 1;
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	085b      	lsrs	r3, r3, #1
 8000968:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 4; i++) {
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	3301      	adds	r3, #1
 800096e:	61fb      	str	r3, [r7, #28]
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	2b03      	cmp	r3, #3
 8000974:	dded      	ble.n	8000952 <send_Idata+0x16>

	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, temp[0]);
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	461a      	mov	r2, r3
 800097c:	2101      	movs	r1, #1
 800097e:	4814      	ldr	r0, [pc, #80]	; (80009d0 <send_Idata+0x94>)
 8000980:	f001 f850 	bl	8001a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, temp[1]);
 8000984:	693b      	ldr	r3, [r7, #16]
 8000986:	b2db      	uxtb	r3, r3
 8000988:	461a      	mov	r2, r3
 800098a:	2102      	movs	r1, #2
 800098c:	4810      	ldr	r0, [pc, #64]	; (80009d0 <send_Idata+0x94>)
 800098e:	f001 f849 	bl	8001a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, temp[2]);
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	461a      	mov	r2, r3
 8000998:	2104      	movs	r1, #4
 800099a:	480d      	ldr	r0, [pc, #52]	; (80009d0 <send_Idata+0x94>)
 800099c:	f001 f842 	bl	8001a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, temp[3]);
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	461a      	mov	r2, r3
 80009a6:	2108      	movs	r1, #8
 80009a8:	4809      	ldr	r0, [pc, #36]	; (80009d0 <send_Idata+0x94>)
 80009aa:	f001 f83b 	bl	8001a24 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80009ae:	2201      	movs	r2, #1
 80009b0:	2104      	movs	r1, #4
 80009b2:	4808      	ldr	r0, [pc, #32]	; (80009d4 <send_Idata+0x98>)
 80009b4:	f001 f836 	bl	8001a24 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80009b8:	2002      	movs	r0, #2
 80009ba:	f000 fd7d 	bl	80014b8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2104      	movs	r1, #4
 80009c2:	4804      	ldr	r0, [pc, #16]	; (80009d4 <send_Idata+0x98>)
 80009c4:	f001 f82e 	bl	8001a24 <HAL_GPIO_WritePin>

}
 80009c8:	bf00      	nop
 80009ca:	3720      	adds	r7, #32
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40010800 	.word	0x40010800
 80009d4:	40010c00 	.word	0x40010c00

080009d8 <send_command>:
void send_command(uint8_t data) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 80009e2:	2002      	movs	r0, #2
 80009e4:	f000 fd68 	bl	80014b8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2101      	movs	r1, #1
 80009ec:	480a      	ldr	r0, [pc, #40]	; (8000a18 <send_command+0x40>)
 80009ee:	f001 f819 	bl	8001a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2102      	movs	r1, #2
 80009f6:	4808      	ldr	r0, [pc, #32]	; (8000a18 <send_command+0x40>)
 80009f8:	f001 f814 	bl	8001a24 <HAL_GPIO_WritePin>

	send_Idata(data >> 4);
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	091b      	lsrs	r3, r3, #4
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ff9a 	bl	800093c <send_Idata>
	send_Idata(data);
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ff96 	bl	800093c <send_Idata>

}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40010c00 	.word	0x40010c00

08000a1c <lcd_init>:
void lcd_init(void) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	HAL_Delay(2);
 8000a20:	2002      	movs	r0, #2
 8000a22:	f000 fd49 	bl	80014b8 <HAL_Delay>
	send_command(0x02);
 8000a26:	2002      	movs	r0, #2
 8000a28:	f7ff ffd6 	bl	80009d8 <send_command>
	send_command(0x28);
 8000a2c:	2028      	movs	r0, #40	; 0x28
 8000a2e:	f7ff ffd3 	bl	80009d8 <send_command>
	send_command(0x0F);
 8000a32:	200f      	movs	r0, #15
 8000a34:	f7ff ffd0 	bl	80009d8 <send_command>
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <send_data>:
void send_data(uint8_t data) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8000a46:	2002      	movs	r0, #2
 8000a48:	f000 fd36 	bl	80014b8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2101      	movs	r1, #1
 8000a50:	480a      	ldr	r0, [pc, #40]	; (8000a7c <send_data+0x40>)
 8000a52:	f000 ffe7 	bl	8001a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2102      	movs	r1, #2
 8000a5a:	4808      	ldr	r0, [pc, #32]	; (8000a7c <send_data+0x40>)
 8000a5c:	f000 ffe2 	bl	8001a24 <HAL_GPIO_WritePin>

	send_Idata(data >> 4);
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	091b      	lsrs	r3, r3, #4
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ff68 	bl	800093c <send_Idata>

	send_Idata(data);
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff ff64 	bl	800093c <send_Idata>

}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40010c00 	.word	0x40010c00

08000a80 <lcd_puts>:

void lcd_puts(uint8_t *str) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	HAL_Delay(2);
 8000a88:	2002      	movs	r0, #2
 8000a8a:	f000 fd15 	bl	80014b8 <HAL_Delay>
	while (*str != 0x00) {
 8000a8e:	e007      	b.n	8000aa0 <lcd_puts+0x20>
		send_data(*str);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ffd1 	bl	8000a3c <send_data>
		str++;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	607b      	str	r3, [r7, #4]
	while (*str != 0x00) {
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d1f3      	bne.n	8000a90 <lcd_puts+0x10>
	}
}
 8000aa8:	bf00      	nop
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <lcd_gotoxy>:
	HAL_Delay(1);
	send_command(0x01);

}

void lcd_gotoxy(uint8_t x, uint8_t y) {
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	4603      	mov	r3, r0
 8000aba:	460a      	mov	r2, r1
 8000abc:	71fb      	strb	r3, [r7, #7]
 8000abe:	4613      	mov	r3, r2
 8000ac0:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(1);
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f000 fcf8 	bl	80014b8 <HAL_Delay>

	switch (y) {
 8000ac8:	79bb      	ldrb	r3, [r7, #6]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d002      	beq.n	8000ad4 <lcd_gotoxy+0x22>
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d007      	beq.n	8000ae2 <lcd_gotoxy+0x30>
	case 1:
		send_command(0xC0 + x);
		break;

	}
}
 8000ad2:	e00d      	b.n	8000af0 <lcd_gotoxy+0x3e>
		send_command(0x80 + x);
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	3b80      	subs	r3, #128	; 0x80
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ff7c 	bl	80009d8 <send_command>
		break;
 8000ae0:	e006      	b.n	8000af0 <lcd_gotoxy+0x3e>
		send_command(0xC0 + x);
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	3b40      	subs	r3, #64	; 0x40
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff75 	bl	80009d8 <send_command>
		break;
 8000aee:	bf00      	nop
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <delay>:

void delay(uint16_t time) {
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <delay+0x2c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time)
 8000b0a:	bf00      	nop
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <delay+0x2c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b12:	88fb      	ldrh	r3, [r7, #6]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d3f9      	bcc.n	8000b0c <delay+0x14>
		;
}
 8000b18:	bf00      	nop
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	2000008c 	.word	0x2000008c

08000b28 <HAL_TIM_IC_CaptureCallback>:
uint32_t IC_Val1 = 0, IC_Val2 = 0, Difference = 0;
uint8_t Is_First_Captured = 0, Distance = 0, buff[32], save = 0;
RTC_TimeTypeDef gTime = { 0 };
RTC_AlarmTypeDef gAlarm = { 0 };

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7f1b      	ldrb	r3, [r3, #28]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	f040 8083 	bne.w	8000c40 <HAL_TIM_IC_CaptureCallback+0x118>
		if (Is_First_Captured == 0) {
 8000b3a:	4b45      	ldr	r3, [pc, #276]	; (8000c50 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d11a      	bne.n	8000b78 <HAL_TIM_IC_CaptureCallback+0x50>
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000b42:	2100      	movs	r1, #0
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f002 ff53 	bl	80039f0 <HAL_TIM_ReadCapturedValue>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	4a41      	ldr	r2, [pc, #260]	; (8000c54 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000b4e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;
 8000b50:	4b3f      	ldr	r3, [pc, #252]	; (8000c50 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	6a1a      	ldr	r2, [r3, #32]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f022 020a 	bic.w	r2, r2, #10
 8000b64:	621a      	str	r2, [r3, #32]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	6a1a      	ldr	r2, [r3, #32]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f042 0202 	orr.w	r2, r2, #2
 8000b74:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000b76:	e063      	b.n	8000c40 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured == 1) {
 8000b78:	4b35      	ldr	r3, [pc, #212]	; (8000c50 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d15f      	bne.n	8000c40 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000b80:	2100      	movs	r1, #0
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f002 ff34 	bl	80039f0 <HAL_TIM_ReadCapturedValue>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	4a33      	ldr	r2, [pc, #204]	; (8000c58 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000b8c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 8000b96:	4b30      	ldr	r3, [pc, #192]	; (8000c58 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	4b2e      	ldr	r3, [pc, #184]	; (8000c54 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d907      	bls.n	8000bb2 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2 - IC_Val1;
 8000ba2:	4b2d      	ldr	r3, [pc, #180]	; (8000c58 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	4b2b      	ldr	r3, [pc, #172]	; (8000c54 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	4a2b      	ldr	r2, [pc, #172]	; (8000c5c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000bae:	6013      	str	r3, [r2, #0]
 8000bb0:	e00f      	b.n	8000bd2 <HAL_TIM_IC_CaptureCallback+0xaa>
			} else if (IC_Val1 > IC_Val2) {
 8000bb2:	4b28      	ldr	r3, [pc, #160]	; (8000c54 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	4b28      	ldr	r3, [pc, #160]	; (8000c58 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d909      	bls.n	8000bd2 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000bbe:	4b26      	ldr	r3, [pc, #152]	; (8000c58 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	4b24      	ldr	r3, [pc, #144]	; (8000c54 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000bcc:	33ff      	adds	r3, #255	; 0xff
 8000bce:	4a23      	ldr	r2, [pc, #140]	; (8000c5c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000bd0:	6013      	str	r3, [r2, #0]
			Distance = Difference * 0.0343 / 2;
 8000bd2:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fc04 	bl	80003e4 <__aeabi_ui2d>
 8000bdc:	a31a      	add	r3, pc, #104	; (adr r3, 8000c48 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be2:	f7ff fc79 	bl	80004d8 <__aeabi_dmul>
 8000be6:	4602      	mov	r2, r0
 8000be8:	460b      	mov	r3, r1
 8000bea:	4610      	mov	r0, r2
 8000bec:	4619      	mov	r1, r3
 8000bee:	f04f 0200 	mov.w	r2, #0
 8000bf2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bf6:	f7ff fd99 	bl	800072c <__aeabi_ddiv>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	4610      	mov	r0, r2
 8000c00:	4619      	mov	r1, r3
 8000c02:	f7ff fe7b 	bl	80008fc <__aeabi_d2uiz>
 8000c06:	4603      	mov	r3, r0
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000c0c:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0;
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	6a1a      	ldr	r2, [r3, #32]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f022 020a 	bic.w	r2, r2, #10
 8000c22:	621a      	str	r2, [r3, #32]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	6a12      	ldr	r2, [r2, #32]
 8000c2e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	68da      	ldr	r2, [r3, #12]
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f022 0202 	bic.w	r2, r2, #2
 8000c3e:	60da      	str	r2, [r3, #12]
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	04816f00 	.word	0x04816f00
 8000c4c:	3fa18fc5 	.word	0x3fa18fc5
 8000c50:	20000128 	.word	0x20000128
 8000c54:	2000011c 	.word	0x2000011c
 8000c58:	20000120 	.word	0x20000120
 8000c5c:	20000124 	.word	0x20000124
 8000c60:	20000129 	.word	0x20000129
 8000c64:	2000008c 	.word	0x2000008c

08000c68 <HAL_RTC_AlarmAEventCallback>:
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	UNUSED(hrtc);

	save = 1;
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <HAL_RTC_AlarmAEventCallback+0x18>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	701a      	strb	r2, [r3, #0]
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	2000014c 	.word	0x2000014c

08000c84 <HYSRF05_Read.0>:
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	void HYSRF05_Read(void) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	f8c7 c004 	str.w	ip, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);  //TRIG pin HIGH
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c94:	480b      	ldr	r0, [pc, #44]	; (8000cc4 <HYSRF05_Read.0+0x40>)
 8000c96:	f000 fec5 	bl	8001a24 <HAL_GPIO_WritePin>
		delay(10);  //wait for 10 us
 8000c9a:	200a      	movs	r0, #10
 8000c9c:	f7ff ff2c 	bl	8000af8 <delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);  //TRIG pin low
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca6:	4807      	ldr	r0, [pc, #28]	; (8000cc4 <HYSRF05_Read.0+0x40>)
 8000ca8:	f000 febc 	bl	8001a24 <HAL_GPIO_WritePin>

		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HYSRF05_Read.0+0x44>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	68da      	ldr	r2, [r3, #12]
 8000cb2:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <HYSRF05_Read.0+0x44>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f042 0202 	orr.w	r2, r2, #2
 8000cba:	60da      	str	r2, [r3, #12]
	}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40010800 	.word	0x40010800
 8000cc8:	2000008c 	.word	0x2000008c

08000ccc <main>:
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
int main(void)
 8000cd2:	f107 0310 	add.w	r3, r7, #16
 8000cd6:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd8:	f000 fb8c 	bl	80013f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cdc:	f000 f858 	bl	8000d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce0:	f000 f992 	bl	8001008 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000ce4:	f000 f910 	bl	8000f08 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000ce8:	f000 f964 	bl	8000fb4 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8000cec:	f000 f8a8 	bl	8000e40 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	481f      	ldr	r0, [pc, #124]	; (8000d70 <main+0xa4>)
 8000cf4:	f002 fbcc 	bl	8003490 <HAL_TIM_IC_Start_IT>
	lcd_init();
 8000cf8:	f7ff fe90 	bl	8000a1c <lcd_init>
	HAL_RTC_GetAlarm(&hrtc, &gAlarm, RTC_ALARM_A, RTC_FORMAT_BIN);
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	2200      	movs	r2, #0
 8000d00:	491c      	ldr	r1, [pc, #112]	; (8000d74 <main+0xa8>)
 8000d02:	481d      	ldr	r0, [pc, #116]	; (8000d78 <main+0xac>)
 8000d04:	f002 f832 	bl	8002d6c <HAL_RTC_GetAlarm>
	gAlarm.AlarmTime.Hours = 0;
 8000d08:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <main+0xa8>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
	gAlarm.AlarmTime.Minutes = 0;
 8000d0e:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <main+0xa8>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	705a      	strb	r2, [r3, #1]
	gAlarm.AlarmTime.Seconds = 5;
 8000d14:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <main+0xa8>)
 8000d16:	2205      	movs	r2, #5
 8000d18:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetAlarm(&hrtc, &gAlarm, RTC_FORMAT_BIN);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	4915      	ldr	r1, [pc, #84]	; (8000d74 <main+0xa8>)
 8000d1e:	4816      	ldr	r0, [pc, #88]	; (8000d78 <main+0xac>)
 8000d20:	f001 fed2 	bl	8002ac8 <HAL_RTC_SetAlarm>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HYSRF05_Read();
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	469c      	mov	ip, r3
 8000d28:	f7ff ffac 	bl	8000c84 <HYSRF05_Read.0>
		HAL_Delay(200);
 8000d2c:	20c8      	movs	r0, #200	; 0xc8
 8000d2e:	f000 fbc3 	bl	80014b8 <HAL_Delay>
		sprintf(buff, "Distance = %4d \r\n", Distance);
 8000d32:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <main+0xb0>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	4911      	ldr	r1, [pc, #68]	; (8000d80 <main+0xb4>)
 8000d3a:	4812      	ldr	r0, [pc, #72]	; (8000d84 <main+0xb8>)
 8000d3c:	f003 fa94 	bl	8004268 <siprintf>
		lcd_gotoxy(0, 0);
 8000d40:	2100      	movs	r1, #0
 8000d42:	2000      	movs	r0, #0
 8000d44:	f7ff feb5 	bl	8000ab2 <lcd_gotoxy>
		lcd_puts((uint8_t*) buff);
 8000d48:	480e      	ldr	r0, [pc, #56]	; (8000d84 <main+0xb8>)
 8000d4a:	f7ff fe99 	bl	8000a80 <lcd_puts>
		if (save == 0) {
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <main+0xbc>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1e6      	bne.n	8000d24 <main+0x58>
			HAL_UART_Transmit(&huart3, (uint8_t*) buff, strlen(buff),
 8000d56:	480b      	ldr	r0, [pc, #44]	; (8000d84 <main+0xb8>)
 8000d58:	f7ff f9fa 	bl	8000150 <strlen>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	f04f 33ff 	mov.w	r3, #4294967295
 8000d64:	4907      	ldr	r1, [pc, #28]	; (8000d84 <main+0xb8>)
 8000d66:	4809      	ldr	r0, [pc, #36]	; (8000d8c <main+0xc0>)
 8000d68:	f003 f8fe 	bl	8003f68 <HAL_UART_Transmit>
		HYSRF05_Read();
 8000d6c:	e7da      	b.n	8000d24 <main+0x58>
 8000d6e:	bf00      	nop
 8000d70:	2000008c 	.word	0x2000008c
 8000d74:	20000150 	.word	0x20000150
 8000d78:	20000078 	.word	0x20000078
 8000d7c:	20000129 	.word	0x20000129
 8000d80:	08004be4 	.word	0x08004be4
 8000d84:	2000012c 	.word	0x2000012c
 8000d88:	2000014c 	.word	0x2000014c
 8000d8c:	200000d4 	.word	0x200000d4

08000d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b094      	sub	sp, #80	; 0x50
 8000d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d9a:	2228      	movs	r2, #40	; 0x28
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f003 fa82 	bl	80042a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000dc0:	230a      	movs	r3, #10
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc8:	2310      	movs	r3, #16
 8000dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ddc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 fe43 	bl	8001a6c <HAL_RCC_OscConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000dec:	f000 f96c 	bl	80010c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df0:	230f      	movs	r3, #15
 8000df2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df4:	2302      	movs	r3, #2
 8000df6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f001 f8b0 	bl	8001f70 <HAL_RCC_ClockConfig>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000e16:	f000 f957 	bl	80010c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e22:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	4618      	mov	r0, r3
 8000e28:	f001 fa30 	bl	800228c <HAL_RCCEx_PeriphCLKConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e32:	f000 f949 	bl	80010c8 <Error_Handler>
  }
}
 8000e36:	bf00      	nop
 8000e38:	3750      	adds	r7, #80	; 0x50
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	460a      	mov	r2, r1
 8000e4e:	801a      	strh	r2, [r3, #0]
 8000e50:	460a      	mov	r2, r1
 8000e52:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000e54:	2300      	movs	r3, #0
 8000e56:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8000e58:	463b      	mov	r3, r7
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e60:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <MX_RTC_Init+0xc0>)
 8000e62:	4a28      	ldr	r2, [pc, #160]	; (8000f04 <MX_RTC_Init+0xc4>)
 8000e64:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000e66:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <MX_RTC_Init+0xc0>)
 8000e68:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6c:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000e6e:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <MX_RTC_Init+0xc0>)
 8000e70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e74:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e76:	4822      	ldr	r0, [pc, #136]	; (8000f00 <MX_RTC_Init+0xc0>)
 8000e78:	f001 fb74 	bl	8002564 <HAL_RTC_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000e82:	f000 f921 	bl	80010c8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000e92:	f107 030c 	add.w	r3, r7, #12
 8000e96:	2200      	movs	r2, #0
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4819      	ldr	r0, [pc, #100]	; (8000f00 <MX_RTC_Init+0xc0>)
 8000e9c:	f001 fbee 	bl	800267c <HAL_RTC_SetTime>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8000ea6:	f000 f90f 	bl	80010c8 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 1;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8000eba:	f107 0308 	add.w	r3, r7, #8
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480f      	ldr	r0, [pc, #60]	; (8000f00 <MX_RTC_Init+0xc0>)
 8000ec4:	f001 fd4a 	bl	800295c <HAL_RTC_SetDate>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000ece:	f000 f8fb 	bl	80010c8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_RTC_Init+0xc0>)
 8000eea:	f001 fe87 	bl	8002bfc <HAL_RTC_SetAlarm_IT>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000ef4:	f000 f8e8 	bl	80010c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000078 	.word	0x20000078
 8000f04:	40002800 	.word	0x40002800

08000f08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0e:	f107 0310 	add.w	r3, r7, #16
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f18:	463b      	mov	r3, r7
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f24:	4b21      	ldr	r3, [pc, #132]	; (8000fac <MX_TIM1_Init+0xa4>)
 8000f26:	4a22      	ldr	r2, [pc, #136]	; (8000fb0 <MX_TIM1_Init+0xa8>)
 8000f28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 8000f2a:	4b20      	ldr	r3, [pc, #128]	; (8000fac <MX_TIM1_Init+0xa4>)
 8000f2c:	2207      	movs	r2, #7
 8000f2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f30:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <MX_TIM1_Init+0xa4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000f36:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <MX_TIM1_Init+0xa4>)
 8000f38:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000f3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <MX_TIM1_Init+0xa4>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f44:	4b19      	ldr	r3, [pc, #100]	; (8000fac <MX_TIM1_Init+0xa4>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MX_TIM1_Init+0xa4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000f50:	4816      	ldr	r0, [pc, #88]	; (8000fac <MX_TIM1_Init+0xa4>)
 8000f52:	f002 fa4d 	bl	80033f0 <HAL_TIM_IC_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000f5c:	f000 f8b4 	bl	80010c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f60:	2300      	movs	r3, #0
 8000f62:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f68:	f107 0310 	add.w	r3, r7, #16
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	480f      	ldr	r0, [pc, #60]	; (8000fac <MX_TIM1_Init+0xa4>)
 8000f70:	f002 ff3a 	bl	8003de8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000f7a:	f000 f8a5 	bl	80010c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f82:	2301      	movs	r3, #1
 8000f84:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f8e:	463b      	mov	r3, r7
 8000f90:	2200      	movs	r2, #0
 8000f92:	4619      	mov	r1, r3
 8000f94:	4805      	ldr	r0, [pc, #20]	; (8000fac <MX_TIM1_Init+0xa4>)
 8000f96:	f002 fc8f 	bl	80038b8 <HAL_TIM_IC_ConfigChannel>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000fa0:	f000 f892 	bl	80010c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	2000008c 	.word	0x2000008c
 8000fb0:	40012c00 	.word	0x40012c00

08000fb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fba:	4a12      	ldr	r2, [pc, #72]	; (8001004 <MX_USART3_UART_Init+0x50>)
 8000fbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fc0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fda:	220c      	movs	r2, #12
 8000fdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fec:	f002 ff6c 	bl	8003ec8 <HAL_UART_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ff6:	f000 f867 	bl	80010c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200000d4 	.word	0x200000d4
 8001004:	40004800 	.word	0x40004800

08001008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100e:	f107 0310 	add.w	r3, r7, #16
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101c:	4b27      	ldr	r3, [pc, #156]	; (80010bc <MX_GPIO_Init+0xb4>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a26      	ldr	r2, [pc, #152]	; (80010bc <MX_GPIO_Init+0xb4>)
 8001022:	f043 0310 	orr.w	r3, r3, #16
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b24      	ldr	r3, [pc, #144]	; (80010bc <MX_GPIO_Init+0xb4>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0310 	and.w	r3, r3, #16
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001034:	4b21      	ldr	r3, [pc, #132]	; (80010bc <MX_GPIO_Init+0xb4>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	4a20      	ldr	r2, [pc, #128]	; (80010bc <MX_GPIO_Init+0xb4>)
 800103a:	f043 0304 	orr.w	r3, r3, #4
 800103e:	6193      	str	r3, [r2, #24]
 8001040:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <MX_GPIO_Init+0xb4>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104c:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <MX_GPIO_Init+0xb4>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	4a1a      	ldr	r2, [pc, #104]	; (80010bc <MX_GPIO_Init+0xb4>)
 8001052:	f043 0308 	orr.w	r3, r3, #8
 8001056:	6193      	str	r3, [r2, #24]
 8001058:	4b18      	ldr	r3, [pc, #96]	; (80010bc <MX_GPIO_Init+0xb4>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f003 0308 	and.w	r3, r3, #8
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001064:	2200      	movs	r2, #0
 8001066:	f240 210f 	movw	r1, #527	; 0x20f
 800106a:	4815      	ldr	r0, [pc, #84]	; (80010c0 <MX_GPIO_Init+0xb8>)
 800106c:	f000 fcda 	bl	8001a24 <HAL_GPIO_WritePin>
                          |Trig_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Rs_Pin|RW_Pin|EN_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2107      	movs	r1, #7
 8001074:	4813      	ldr	r0, [pc, #76]	; (80010c4 <MX_GPIO_Init+0xbc>)
 8001076:	f000 fcd5 	bl	8001a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           Trig_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800107a:	f240 230f 	movw	r3, #527	; 0x20f
 800107e:	613b      	str	r3, [r7, #16]
                          |Trig_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2302      	movs	r3, #2
 800108a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	4619      	mov	r1, r3
 8001092:	480b      	ldr	r0, [pc, #44]	; (80010c0 <MX_GPIO_Init+0xb8>)
 8001094:	f000 fb42 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : Rs_Pin RW_Pin EN_Pin */
  GPIO_InitStruct.Pin = Rs_Pin|RW_Pin|EN_Pin;
 8001098:	2307      	movs	r3, #7
 800109a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2302      	movs	r3, #2
 80010a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	4619      	mov	r1, r3
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_GPIO_Init+0xbc>)
 80010b0:	f000 fb34 	bl	800171c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010b4:	bf00      	nop
 80010b6:	3720      	adds	r7, #32
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40010800 	.word	0x40010800
 80010c4:	40010c00 	.word	0x40010c00

080010c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010cc:	b672      	cpsid	i
}
 80010ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010d0:	e7fe      	b.n	80010d0 <Error_Handler+0x8>
	...

080010d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_MspInit+0x5c>)
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	4a14      	ldr	r2, [pc, #80]	; (8001130 <HAL_MspInit+0x5c>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6193      	str	r3, [r2, #24]
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_MspInit+0x5c>)
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_MspInit+0x5c>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <HAL_MspInit+0x5c>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fc:	61d3      	str	r3, [r2, #28]
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_MspInit+0x5c>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <HAL_MspInit+0x60>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <HAL_MspInit+0x60>)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001126:	bf00      	nop
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	40021000 	.word	0x40021000
 8001134:	40010000 	.word	0x40010000

08001138 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0f      	ldr	r2, [pc, #60]	; (8001184 <HAL_RTC_MspInit+0x4c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d118      	bne.n	800117c <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800114a:	f000 fc83 	bl	8001a54 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <HAL_RTC_MspInit+0x50>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	4a0d      	ldr	r2, [pc, #52]	; (8001188 <HAL_RTC_MspInit+0x50>)
 8001154:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001158:	61d3      	str	r3, [r2, #28]
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <HAL_RTC_MspInit+0x50>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <HAL_RTC_MspInit+0x54>)
 8001168:	2201      	movs	r2, #1
 800116a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2100      	movs	r1, #0
 8001170:	2029      	movs	r0, #41	; 0x29
 8001172:	f000 fa9c 	bl	80016ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001176:	2029      	movs	r0, #41	; 0x29
 8001178:	f000 fab5 	bl	80016e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40002800 	.word	0x40002800
 8001188:	40021000 	.word	0x40021000
 800118c:	4242043c 	.word	0x4242043c

08001190 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a1a      	ldr	r2, [pc, #104]	; (8001214 <HAL_TIM_IC_MspInit+0x84>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d12c      	bne.n	800120a <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011b0:	4b19      	ldr	r3, [pc, #100]	; (8001218 <HAL_TIM_IC_MspInit+0x88>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a18      	ldr	r2, [pc, #96]	; (8001218 <HAL_TIM_IC_MspInit+0x88>)
 80011b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b16      	ldr	r3, [pc, #88]	; (8001218 <HAL_TIM_IC_MspInit+0x88>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <HAL_TIM_IC_MspInit+0x88>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a12      	ldr	r2, [pc, #72]	; (8001218 <HAL_TIM_IC_MspInit+0x88>)
 80011ce:	f043 0304 	orr.w	r3, r3, #4
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	4b10      	ldr	r3, [pc, #64]	; (8001218 <HAL_TIM_IC_MspInit+0x88>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 80011e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	4619      	mov	r1, r3
 80011f4:	4809      	ldr	r0, [pc, #36]	; (800121c <HAL_TIM_IC_MspInit+0x8c>)
 80011f6:	f000 fa91 	bl	800171c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	201b      	movs	r0, #27
 8001200:	f000 fa55 	bl	80016ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001204:	201b      	movs	r0, #27
 8001206:	f000 fa6e 	bl	80016e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800120a:	bf00      	nop
 800120c:	3720      	adds	r7, #32
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40012c00 	.word	0x40012c00
 8001218:	40021000 	.word	0x40021000
 800121c:	40010800 	.word	0x40010800

08001220 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a1c      	ldr	r2, [pc, #112]	; (80012ac <HAL_UART_MspInit+0x8c>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d131      	bne.n	80012a4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <HAL_UART_MspInit+0x90>)
 8001242:	69db      	ldr	r3, [r3, #28]
 8001244:	4a1a      	ldr	r2, [pc, #104]	; (80012b0 <HAL_UART_MspInit+0x90>)
 8001246:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800124a:	61d3      	str	r3, [r2, #28]
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <HAL_UART_MspInit+0x90>)
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_UART_MspInit+0x90>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <HAL_UART_MspInit+0x90>)
 800125e:	f043 0308 	orr.w	r3, r3, #8
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_UART_MspInit+0x90>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001274:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	4619      	mov	r1, r3
 8001284:	480b      	ldr	r0, [pc, #44]	; (80012b4 <HAL_UART_MspInit+0x94>)
 8001286:	f000 fa49 	bl	800171c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800128a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800128e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	4619      	mov	r1, r3
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <HAL_UART_MspInit+0x94>)
 80012a0:	f000 fa3c 	bl	800171c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012a4:	bf00      	nop
 80012a6:	3720      	adds	r7, #32
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40004800 	.word	0x40004800
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010c00 	.word	0x40010c00

080012b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012bc:	e7fe      	b.n	80012bc <NMI_Handler+0x4>

080012be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <HardFault_Handler+0x4>

080012c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <MemManage_Handler+0x4>

080012ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <BusFault_Handler+0x4>

080012d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <UsageFault_Handler+0x4>

080012d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr

080012e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr

080012ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr

080012fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012fe:	f000 f8bf 	bl	8001480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800130c:	4802      	ldr	r0, [pc, #8]	; (8001318 <TIM1_CC_IRQHandler+0x10>)
 800130e:	f002 f9cb 	bl	80036a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	2000008c 	.word	0x2000008c

0800131c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <RTC_Alarm_IRQHandler+0x10>)
 8001322:	f001 fd99 	bl	8002e58 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000078 	.word	0x20000078

08001330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001338:	4a14      	ldr	r2, [pc, #80]	; (800138c <_sbrk+0x5c>)
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <_sbrk+0x60>)
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d102      	bne.n	8001352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <_sbrk+0x64>)
 800134e:	4a12      	ldr	r2, [pc, #72]	; (8001398 <_sbrk+0x68>)
 8001350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <_sbrk+0x64>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	429a      	cmp	r2, r3
 800135e:	d207      	bcs.n	8001370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001360:	f002 ffaa 	bl	80042b8 <__errno>
 8001364:	4603      	mov	r3, r0
 8001366:	220c      	movs	r2, #12
 8001368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	e009      	b.n	8001384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001376:	4b07      	ldr	r3, [pc, #28]	; (8001394 <_sbrk+0x64>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	4a05      	ldr	r2, [pc, #20]	; (8001394 <_sbrk+0x64>)
 8001380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001382:	68fb      	ldr	r3, [r7, #12]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20005000 	.word	0x20005000
 8001390:	00000400 	.word	0x00000400
 8001394:	20000158 	.word	0x20000158
 8001398:	200002a8 	.word	0x200002a8

0800139c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013a8:	f7ff fff8 	bl	800139c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013ac:	480b      	ldr	r0, [pc, #44]	; (80013dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013ae:	490c      	ldr	r1, [pc, #48]	; (80013e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013b0:	4a0c      	ldr	r2, [pc, #48]	; (80013e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b4:	e002      	b.n	80013bc <LoopCopyDataInit>

080013b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ba:	3304      	adds	r3, #4

080013bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c0:	d3f9      	bcc.n	80013b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c2:	4a09      	ldr	r2, [pc, #36]	; (80013e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013c4:	4c09      	ldr	r4, [pc, #36]	; (80013ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c8:	e001      	b.n	80013ce <LoopFillZerobss>

080013ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013cc:	3204      	adds	r2, #4

080013ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d0:	d3fb      	bcc.n	80013ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013d2:	f002 ff77 	bl	80042c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013d6:	f7ff fc79 	bl	8000ccc <main>
  bx lr
 80013da:	4770      	bx	lr
  ldr r0, =_sdata
 80013dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80013e4:	08004c74 	.word	0x08004c74
  ldr r2, =_sbss
 80013e8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80013ec:	200002a8 	.word	0x200002a8

080013f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013f0:	e7fe      	b.n	80013f0 <ADC1_2_IRQHandler>
	...

080013f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <HAL_Init+0x28>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a07      	ldr	r2, [pc, #28]	; (800141c <HAL_Init+0x28>)
 80013fe:	f043 0310 	orr.w	r3, r3, #16
 8001402:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001404:	2003      	movs	r0, #3
 8001406:	f000 f947 	bl	8001698 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800140a:	200f      	movs	r0, #15
 800140c:	f000 f808 	bl	8001420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001410:	f7ff fe60 	bl	80010d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40022000 	.word	0x40022000

08001420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_InitTick+0x54>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_InitTick+0x58>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4619      	mov	r1, r3
 8001432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001436:	fbb3 f3f1 	udiv	r3, r3, r1
 800143a:	fbb2 f3f3 	udiv	r3, r2, r3
 800143e:	4618      	mov	r0, r3
 8001440:	f000 f95f 	bl	8001702 <HAL_SYSTICK_Config>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e00e      	b.n	800146c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b0f      	cmp	r3, #15
 8001452:	d80a      	bhi.n	800146a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001454:	2200      	movs	r2, #0
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	f04f 30ff 	mov.w	r0, #4294967295
 800145c:	f000 f927 	bl	80016ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001460:	4a06      	ldr	r2, [pc, #24]	; (800147c <HAL_InitTick+0x5c>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	e000      	b.n	800146c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
}
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000000 	.word	0x20000000
 8001478:	20000008 	.word	0x20000008
 800147c:	20000004 	.word	0x20000004

08001480 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <HAL_IncTick+0x1c>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <HAL_IncTick+0x20>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4413      	add	r3, r2
 8001490:	4a03      	ldr	r2, [pc, #12]	; (80014a0 <HAL_IncTick+0x20>)
 8001492:	6013      	str	r3, [r2, #0]
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr
 800149c:	20000008 	.word	0x20000008
 80014a0:	2000015c 	.word	0x2000015c

080014a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return uwTick;
 80014a8:	4b02      	ldr	r3, [pc, #8]	; (80014b4 <HAL_GetTick+0x10>)
 80014aa:	681b      	ldr	r3, [r3, #0]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	2000015c 	.word	0x2000015c

080014b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c0:	f7ff fff0 	bl	80014a4 <HAL_GetTick>
 80014c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d0:	d005      	beq.n	80014de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <HAL_Delay+0x44>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	461a      	mov	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4413      	add	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014de:	bf00      	nop
 80014e0:	f7ff ffe0 	bl	80014a4 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d8f7      	bhi.n	80014e0 <HAL_Delay+0x28>
  {
  }
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000008 	.word	0x20000008

08001500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800151c:	4013      	ands	r3, r2
 800151e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001528:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800152c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001532:	4a04      	ldr	r2, [pc, #16]	; (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	60d3      	str	r3, [r2, #12]
}
 8001538:	bf00      	nop
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <__NVIC_GetPriorityGrouping+0x18>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	0a1b      	lsrs	r3, r3, #8
 8001552:	f003 0307 	and.w	r3, r3, #7
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	2b00      	cmp	r3, #0
 8001574:	db0b      	blt.n	800158e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	f003 021f 	and.w	r2, r3, #31
 800157c:	4906      	ldr	r1, [pc, #24]	; (8001598 <__NVIC_EnableIRQ+0x34>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	095b      	lsrs	r3, r3, #5
 8001584:	2001      	movs	r0, #1
 8001586:	fa00 f202 	lsl.w	r2, r0, r2
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	e000e100 	.word	0xe000e100

0800159c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	6039      	str	r1, [r7, #0]
 80015a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	db0a      	blt.n	80015c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	490c      	ldr	r1, [pc, #48]	; (80015e8 <__NVIC_SetPriority+0x4c>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	0112      	lsls	r2, r2, #4
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	440b      	add	r3, r1
 80015c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c4:	e00a      	b.n	80015dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4908      	ldr	r1, [pc, #32]	; (80015ec <__NVIC_SetPriority+0x50>)
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	3b04      	subs	r3, #4
 80015d4:	0112      	lsls	r2, r2, #4
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	440b      	add	r3, r1
 80015da:	761a      	strb	r2, [r3, #24]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000e100 	.word	0xe000e100
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b089      	sub	sp, #36	; 0x24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f1c3 0307 	rsb	r3, r3, #7
 800160a:	2b04      	cmp	r3, #4
 800160c:	bf28      	it	cs
 800160e:	2304      	movcs	r3, #4
 8001610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3304      	adds	r3, #4
 8001616:	2b06      	cmp	r3, #6
 8001618:	d902      	bls.n	8001620 <NVIC_EncodePriority+0x30>
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3b03      	subs	r3, #3
 800161e:	e000      	b.n	8001622 <NVIC_EncodePriority+0x32>
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	f04f 32ff 	mov.w	r2, #4294967295
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43da      	mvns	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	401a      	ands	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001638:	f04f 31ff 	mov.w	r1, #4294967295
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	43d9      	mvns	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	4313      	orrs	r3, r2
         );
}
 800164a:	4618      	mov	r0, r3
 800164c:	3724      	adds	r7, #36	; 0x24
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001664:	d301      	bcc.n	800166a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001666:	2301      	movs	r3, #1
 8001668:	e00f      	b.n	800168a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166a:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <SysTick_Config+0x40>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001672:	210f      	movs	r1, #15
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	f7ff ff90 	bl	800159c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <SysTick_Config+0x40>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001682:	4b04      	ldr	r3, [pc, #16]	; (8001694 <SysTick_Config+0x40>)
 8001684:	2207      	movs	r2, #7
 8001686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	e000e010 	.word	0xe000e010

08001698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ff2d 	bl	8001500 <__NVIC_SetPriorityGrouping>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4603      	mov	r3, r0
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c0:	f7ff ff42 	bl	8001548 <__NVIC_GetPriorityGrouping>
 80016c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	68b9      	ldr	r1, [r7, #8]
 80016ca:	6978      	ldr	r0, [r7, #20]
 80016cc:	f7ff ff90 	bl	80015f0 <NVIC_EncodePriority>
 80016d0:	4602      	mov	r2, r0
 80016d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d6:	4611      	mov	r1, r2
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff5f 	bl	800159c <__NVIC_SetPriority>
}
 80016de:	bf00      	nop
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	4603      	mov	r3, r0
 80016ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff35 	bl	8001564 <__NVIC_EnableIRQ>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff ffa2 	bl	8001654 <SysTick_Config>
 8001710:	4603      	mov	r3, r0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800171c:	b480      	push	{r7}
 800171e:	b08b      	sub	sp, #44	; 0x2c
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001726:	2300      	movs	r3, #0
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800172a:	2300      	movs	r3, #0
 800172c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800172e:	e169      	b.n	8001a04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001730:	2201      	movs	r2, #1
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	69fa      	ldr	r2, [r7, #28]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	429a      	cmp	r2, r3
 800174a:	f040 8158 	bne.w	80019fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	4a9a      	ldr	r2, [pc, #616]	; (80019bc <HAL_GPIO_Init+0x2a0>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d05e      	beq.n	8001816 <HAL_GPIO_Init+0xfa>
 8001758:	4a98      	ldr	r2, [pc, #608]	; (80019bc <HAL_GPIO_Init+0x2a0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d875      	bhi.n	800184a <HAL_GPIO_Init+0x12e>
 800175e:	4a98      	ldr	r2, [pc, #608]	; (80019c0 <HAL_GPIO_Init+0x2a4>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d058      	beq.n	8001816 <HAL_GPIO_Init+0xfa>
 8001764:	4a96      	ldr	r2, [pc, #600]	; (80019c0 <HAL_GPIO_Init+0x2a4>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d86f      	bhi.n	800184a <HAL_GPIO_Init+0x12e>
 800176a:	4a96      	ldr	r2, [pc, #600]	; (80019c4 <HAL_GPIO_Init+0x2a8>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d052      	beq.n	8001816 <HAL_GPIO_Init+0xfa>
 8001770:	4a94      	ldr	r2, [pc, #592]	; (80019c4 <HAL_GPIO_Init+0x2a8>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d869      	bhi.n	800184a <HAL_GPIO_Init+0x12e>
 8001776:	4a94      	ldr	r2, [pc, #592]	; (80019c8 <HAL_GPIO_Init+0x2ac>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d04c      	beq.n	8001816 <HAL_GPIO_Init+0xfa>
 800177c:	4a92      	ldr	r2, [pc, #584]	; (80019c8 <HAL_GPIO_Init+0x2ac>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d863      	bhi.n	800184a <HAL_GPIO_Init+0x12e>
 8001782:	4a92      	ldr	r2, [pc, #584]	; (80019cc <HAL_GPIO_Init+0x2b0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d046      	beq.n	8001816 <HAL_GPIO_Init+0xfa>
 8001788:	4a90      	ldr	r2, [pc, #576]	; (80019cc <HAL_GPIO_Init+0x2b0>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d85d      	bhi.n	800184a <HAL_GPIO_Init+0x12e>
 800178e:	2b12      	cmp	r3, #18
 8001790:	d82a      	bhi.n	80017e8 <HAL_GPIO_Init+0xcc>
 8001792:	2b12      	cmp	r3, #18
 8001794:	d859      	bhi.n	800184a <HAL_GPIO_Init+0x12e>
 8001796:	a201      	add	r2, pc, #4	; (adr r2, 800179c <HAL_GPIO_Init+0x80>)
 8001798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179c:	08001817 	.word	0x08001817
 80017a0:	080017f1 	.word	0x080017f1
 80017a4:	08001803 	.word	0x08001803
 80017a8:	08001845 	.word	0x08001845
 80017ac:	0800184b 	.word	0x0800184b
 80017b0:	0800184b 	.word	0x0800184b
 80017b4:	0800184b 	.word	0x0800184b
 80017b8:	0800184b 	.word	0x0800184b
 80017bc:	0800184b 	.word	0x0800184b
 80017c0:	0800184b 	.word	0x0800184b
 80017c4:	0800184b 	.word	0x0800184b
 80017c8:	0800184b 	.word	0x0800184b
 80017cc:	0800184b 	.word	0x0800184b
 80017d0:	0800184b 	.word	0x0800184b
 80017d4:	0800184b 	.word	0x0800184b
 80017d8:	0800184b 	.word	0x0800184b
 80017dc:	0800184b 	.word	0x0800184b
 80017e0:	080017f9 	.word	0x080017f9
 80017e4:	0800180d 	.word	0x0800180d
 80017e8:	4a79      	ldr	r2, [pc, #484]	; (80019d0 <HAL_GPIO_Init+0x2b4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d013      	beq.n	8001816 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017ee:	e02c      	b.n	800184a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	623b      	str	r3, [r7, #32]
          break;
 80017f6:	e029      	b.n	800184c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	3304      	adds	r3, #4
 80017fe:	623b      	str	r3, [r7, #32]
          break;
 8001800:	e024      	b.n	800184c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	3308      	adds	r3, #8
 8001808:	623b      	str	r3, [r7, #32]
          break;
 800180a:	e01f      	b.n	800184c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	330c      	adds	r3, #12
 8001812:	623b      	str	r3, [r7, #32]
          break;
 8001814:	e01a      	b.n	800184c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d102      	bne.n	8001824 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800181e:	2304      	movs	r3, #4
 8001820:	623b      	str	r3, [r7, #32]
          break;
 8001822:	e013      	b.n	800184c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d105      	bne.n	8001838 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800182c:	2308      	movs	r3, #8
 800182e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69fa      	ldr	r2, [r7, #28]
 8001834:	611a      	str	r2, [r3, #16]
          break;
 8001836:	e009      	b.n	800184c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001838:	2308      	movs	r3, #8
 800183a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	615a      	str	r2, [r3, #20]
          break;
 8001842:	e003      	b.n	800184c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
          break;
 8001848:	e000      	b.n	800184c <HAL_GPIO_Init+0x130>
          break;
 800184a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	2bff      	cmp	r3, #255	; 0xff
 8001850:	d801      	bhi.n	8001856 <HAL_GPIO_Init+0x13a>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	e001      	b.n	800185a <HAL_GPIO_Init+0x13e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3304      	adds	r3, #4
 800185a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	2bff      	cmp	r3, #255	; 0xff
 8001860:	d802      	bhi.n	8001868 <HAL_GPIO_Init+0x14c>
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	e002      	b.n	800186e <HAL_GPIO_Init+0x152>
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	3b08      	subs	r3, #8
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	210f      	movs	r1, #15
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	fa01 f303 	lsl.w	r3, r1, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	401a      	ands	r2, r3
 8001880:	6a39      	ldr	r1, [r7, #32]
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	fa01 f303 	lsl.w	r3, r1, r3
 8001888:	431a      	orrs	r2, r3
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 80b1 	beq.w	80019fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800189c:	4b4d      	ldr	r3, [pc, #308]	; (80019d4 <HAL_GPIO_Init+0x2b8>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a4c      	ldr	r2, [pc, #304]	; (80019d4 <HAL_GPIO_Init+0x2b8>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6193      	str	r3, [r2, #24]
 80018a8:	4b4a      	ldr	r3, [pc, #296]	; (80019d4 <HAL_GPIO_Init+0x2b8>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018b4:	4a48      	ldr	r2, [pc, #288]	; (80019d8 <HAL_GPIO_Init+0x2bc>)
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	089b      	lsrs	r3, r3, #2
 80018ba:	3302      	adds	r3, #2
 80018bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	220f      	movs	r2, #15
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	4013      	ands	r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a40      	ldr	r2, [pc, #256]	; (80019dc <HAL_GPIO_Init+0x2c0>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d013      	beq.n	8001908 <HAL_GPIO_Init+0x1ec>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a3f      	ldr	r2, [pc, #252]	; (80019e0 <HAL_GPIO_Init+0x2c4>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d00d      	beq.n	8001904 <HAL_GPIO_Init+0x1e8>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a3e      	ldr	r2, [pc, #248]	; (80019e4 <HAL_GPIO_Init+0x2c8>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d007      	beq.n	8001900 <HAL_GPIO_Init+0x1e4>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a3d      	ldr	r2, [pc, #244]	; (80019e8 <HAL_GPIO_Init+0x2cc>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d101      	bne.n	80018fc <HAL_GPIO_Init+0x1e0>
 80018f8:	2303      	movs	r3, #3
 80018fa:	e006      	b.n	800190a <HAL_GPIO_Init+0x1ee>
 80018fc:	2304      	movs	r3, #4
 80018fe:	e004      	b.n	800190a <HAL_GPIO_Init+0x1ee>
 8001900:	2302      	movs	r3, #2
 8001902:	e002      	b.n	800190a <HAL_GPIO_Init+0x1ee>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <HAL_GPIO_Init+0x1ee>
 8001908:	2300      	movs	r3, #0
 800190a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800190c:	f002 0203 	and.w	r2, r2, #3
 8001910:	0092      	lsls	r2, r2, #2
 8001912:	4093      	lsls	r3, r2
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	4313      	orrs	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800191a:	492f      	ldr	r1, [pc, #188]	; (80019d8 <HAL_GPIO_Init+0x2bc>)
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	089b      	lsrs	r3, r3, #2
 8001920:	3302      	adds	r3, #2
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d006      	beq.n	8001942 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001934:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <HAL_GPIO_Init+0x2d0>)
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	492c      	ldr	r1, [pc, #176]	; (80019ec <HAL_GPIO_Init+0x2d0>)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	608b      	str	r3, [r1, #8]
 8001940:	e006      	b.n	8001950 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001942:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <HAL_GPIO_Init+0x2d0>)
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	43db      	mvns	r3, r3
 800194a:	4928      	ldr	r1, [pc, #160]	; (80019ec <HAL_GPIO_Init+0x2d0>)
 800194c:	4013      	ands	r3, r2
 800194e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d006      	beq.n	800196a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800195c:	4b23      	ldr	r3, [pc, #140]	; (80019ec <HAL_GPIO_Init+0x2d0>)
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	4922      	ldr	r1, [pc, #136]	; (80019ec <HAL_GPIO_Init+0x2d0>)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	60cb      	str	r3, [r1, #12]
 8001968:	e006      	b.n	8001978 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800196a:	4b20      	ldr	r3, [pc, #128]	; (80019ec <HAL_GPIO_Init+0x2d0>)
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	43db      	mvns	r3, r3
 8001972:	491e      	ldr	r1, [pc, #120]	; (80019ec <HAL_GPIO_Init+0x2d0>)
 8001974:	4013      	ands	r3, r2
 8001976:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d006      	beq.n	8001992 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001984:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_GPIO_Init+0x2d0>)
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	4918      	ldr	r1, [pc, #96]	; (80019ec <HAL_GPIO_Init+0x2d0>)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	604b      	str	r3, [r1, #4]
 8001990:	e006      	b.n	80019a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001992:	4b16      	ldr	r3, [pc, #88]	; (80019ec <HAL_GPIO_Init+0x2d0>)
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	43db      	mvns	r3, r3
 800199a:	4914      	ldr	r1, [pc, #80]	; (80019ec <HAL_GPIO_Init+0x2d0>)
 800199c:	4013      	ands	r3, r2
 800199e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d021      	beq.n	80019f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019ac:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <HAL_GPIO_Init+0x2d0>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	490e      	ldr	r1, [pc, #56]	; (80019ec <HAL_GPIO_Init+0x2d0>)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	600b      	str	r3, [r1, #0]
 80019b8:	e021      	b.n	80019fe <HAL_GPIO_Init+0x2e2>
 80019ba:	bf00      	nop
 80019bc:	10320000 	.word	0x10320000
 80019c0:	10310000 	.word	0x10310000
 80019c4:	10220000 	.word	0x10220000
 80019c8:	10210000 	.word	0x10210000
 80019cc:	10120000 	.word	0x10120000
 80019d0:	10110000 	.word	0x10110000
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40010000 	.word	0x40010000
 80019dc:	40010800 	.word	0x40010800
 80019e0:	40010c00 	.word	0x40010c00
 80019e4:	40011000 	.word	0x40011000
 80019e8:	40011400 	.word	0x40011400
 80019ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_GPIO_Init+0x304>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	4909      	ldr	r1, [pc, #36]	; (8001a20 <HAL_GPIO_Init+0x304>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	3301      	adds	r3, #1
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f47f ae8e 	bne.w	8001730 <HAL_GPIO_Init+0x14>
  }
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	372c      	adds	r7, #44	; 0x2c
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	40010400 	.word	0x40010400

08001a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	807b      	strh	r3, [r7, #2]
 8001a30:	4613      	mov	r3, r2
 8001a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a34:	787b      	ldrb	r3, [r7, #1]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a3a:	887a      	ldrh	r2, [r7, #2]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a40:	e003      	b.n	8001a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a42:	887b      	ldrh	r3, [r7, #2]
 8001a44:	041a      	lsls	r2, r3, #16
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	611a      	str	r2, [r3, #16]
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	420e0020 	.word	0x420e0020

08001a6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e272      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 8087 	beq.w	8001b9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a8c:	4b92      	ldr	r3, [pc, #584]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 030c 	and.w	r3, r3, #12
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d00c      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a98:	4b8f      	ldr	r3, [pc, #572]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 030c 	and.w	r3, r3, #12
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d112      	bne.n	8001aca <HAL_RCC_OscConfig+0x5e>
 8001aa4:	4b8c      	ldr	r3, [pc, #560]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab0:	d10b      	bne.n	8001aca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab2:	4b89      	ldr	r3, [pc, #548]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d06c      	beq.n	8001b98 <HAL_RCC_OscConfig+0x12c>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d168      	bne.n	8001b98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e24c      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad2:	d106      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x76>
 8001ad4:	4b80      	ldr	r3, [pc, #512]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a7f      	ldr	r2, [pc, #508]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	e02e      	b.n	8001b40 <HAL_RCC_OscConfig+0xd4>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10c      	bne.n	8001b04 <HAL_RCC_OscConfig+0x98>
 8001aea:	4b7b      	ldr	r3, [pc, #492]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a7a      	ldr	r2, [pc, #488]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	4b78      	ldr	r3, [pc, #480]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a77      	ldr	r2, [pc, #476]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	e01d      	b.n	8001b40 <HAL_RCC_OscConfig+0xd4>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b0c:	d10c      	bne.n	8001b28 <HAL_RCC_OscConfig+0xbc>
 8001b0e:	4b72      	ldr	r3, [pc, #456]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a71      	ldr	r2, [pc, #452]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	4b6f      	ldr	r3, [pc, #444]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a6e      	ldr	r2, [pc, #440]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	e00b      	b.n	8001b40 <HAL_RCC_OscConfig+0xd4>
 8001b28:	4b6b      	ldr	r3, [pc, #428]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a6a      	ldr	r2, [pc, #424]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	4b68      	ldr	r3, [pc, #416]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a67      	ldr	r2, [pc, #412]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d013      	beq.n	8001b70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff fcac 	bl	80014a4 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b50:	f7ff fca8 	bl	80014a4 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b64      	cmp	r3, #100	; 0x64
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e200      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b62:	4b5d      	ldr	r3, [pc, #372]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0xe4>
 8001b6e:	e014      	b.n	8001b9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7ff fc98 	bl	80014a4 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b78:	f7ff fc94 	bl	80014a4 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b64      	cmp	r3, #100	; 0x64
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e1ec      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8a:	4b53      	ldr	r3, [pc, #332]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x10c>
 8001b96:	e000      	b.n	8001b9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d063      	beq.n	8001c6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ba6:	4b4c      	ldr	r3, [pc, #304]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00b      	beq.n	8001bca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bb2:	4b49      	ldr	r3, [pc, #292]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d11c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x18c>
 8001bbe:	4b46      	ldr	r3, [pc, #280]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d116      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bca:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d005      	beq.n	8001be2 <HAL_RCC_OscConfig+0x176>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d001      	beq.n	8001be2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e1c0      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be2:	4b3d      	ldr	r3, [pc, #244]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4939      	ldr	r1, [pc, #228]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf6:	e03a      	b.n	8001c6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d020      	beq.n	8001c42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c00:	4b36      	ldr	r3, [pc, #216]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c06:	f7ff fc4d 	bl	80014a4 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0e:	f7ff fc49 	bl	80014a4 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e1a1      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c20:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f0      	beq.n	8001c0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2c:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	4927      	ldr	r1, [pc, #156]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	600b      	str	r3, [r1, #0]
 8001c40:	e015      	b.n	8001c6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c42:	4b26      	ldr	r3, [pc, #152]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c48:	f7ff fc2c 	bl	80014a4 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c50:	f7ff fc28 	bl	80014a4 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e180      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d03a      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d019      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c82:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c88:	f7ff fc0c 	bl	80014a4 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c90:	f7ff fc08 	bl	80014a4 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e160      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f0      	beq.n	8001c90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cae:	2001      	movs	r0, #1
 8001cb0:	f000 face 	bl	8002250 <RCC_Delay>
 8001cb4:	e01c      	b.n	8001cf0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cbc:	f7ff fbf2 	bl	80014a4 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc2:	e00f      	b.n	8001ce4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc4:	f7ff fbee 	bl	80014a4 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d908      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e146      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	42420000 	.word	0x42420000
 8001ce0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce4:	4b92      	ldr	r3, [pc, #584]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1e9      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80a6 	beq.w	8001e4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d02:	4b8b      	ldr	r3, [pc, #556]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10d      	bne.n	8001d2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	4b88      	ldr	r3, [pc, #544]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	4a87      	ldr	r2, [pc, #540]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d18:	61d3      	str	r3, [r2, #28]
 8001d1a:	4b85      	ldr	r3, [pc, #532]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d26:	2301      	movs	r3, #1
 8001d28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2a:	4b82      	ldr	r3, [pc, #520]	; (8001f34 <HAL_RCC_OscConfig+0x4c8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d118      	bne.n	8001d68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d36:	4b7f      	ldr	r3, [pc, #508]	; (8001f34 <HAL_RCC_OscConfig+0x4c8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a7e      	ldr	r2, [pc, #504]	; (8001f34 <HAL_RCC_OscConfig+0x4c8>)
 8001d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d42:	f7ff fbaf 	bl	80014a4 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4a:	f7ff fbab 	bl	80014a4 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b64      	cmp	r3, #100	; 0x64
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e103      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5c:	4b75      	ldr	r3, [pc, #468]	; (8001f34 <HAL_RCC_OscConfig+0x4c8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d106      	bne.n	8001d7e <HAL_RCC_OscConfig+0x312>
 8001d70:	4b6f      	ldr	r3, [pc, #444]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	4a6e      	ldr	r2, [pc, #440]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6213      	str	r3, [r2, #32]
 8001d7c:	e02d      	b.n	8001dda <HAL_RCC_OscConfig+0x36e>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10c      	bne.n	8001da0 <HAL_RCC_OscConfig+0x334>
 8001d86:	4b6a      	ldr	r3, [pc, #424]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	4a69      	ldr	r2, [pc, #420]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	6213      	str	r3, [r2, #32]
 8001d92:	4b67      	ldr	r3, [pc, #412]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	4a66      	ldr	r2, [pc, #408]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	f023 0304 	bic.w	r3, r3, #4
 8001d9c:	6213      	str	r3, [r2, #32]
 8001d9e:	e01c      	b.n	8001dda <HAL_RCC_OscConfig+0x36e>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	2b05      	cmp	r3, #5
 8001da6:	d10c      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x356>
 8001da8:	4b61      	ldr	r3, [pc, #388]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	4a60      	ldr	r2, [pc, #384]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	f043 0304 	orr.w	r3, r3, #4
 8001db2:	6213      	str	r3, [r2, #32]
 8001db4:	4b5e      	ldr	r3, [pc, #376]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	4a5d      	ldr	r2, [pc, #372]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6213      	str	r3, [r2, #32]
 8001dc0:	e00b      	b.n	8001dda <HAL_RCC_OscConfig+0x36e>
 8001dc2:	4b5b      	ldr	r3, [pc, #364]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	4a5a      	ldr	r2, [pc, #360]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	f023 0301 	bic.w	r3, r3, #1
 8001dcc:	6213      	str	r3, [r2, #32]
 8001dce:	4b58      	ldr	r3, [pc, #352]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	4a57      	ldr	r2, [pc, #348]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	f023 0304 	bic.w	r3, r3, #4
 8001dd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d015      	beq.n	8001e0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de2:	f7ff fb5f 	bl	80014a4 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de8:	e00a      	b.n	8001e00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dea:	f7ff fb5b 	bl	80014a4 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e0b1      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e00:	4b4b      	ldr	r3, [pc, #300]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0ee      	beq.n	8001dea <HAL_RCC_OscConfig+0x37e>
 8001e0c:	e014      	b.n	8001e38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0e:	f7ff fb49 	bl	80014a4 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7ff fb45 	bl	80014a4 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e09b      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e2c:	4b40      	ldr	r3, [pc, #256]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1ee      	bne.n	8001e16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e38:	7dfb      	ldrb	r3, [r7, #23]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d105      	bne.n	8001e4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e3e:	4b3c      	ldr	r3, [pc, #240]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	4a3b      	ldr	r2, [pc, #236]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 8087 	beq.w	8001f62 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e54:	4b36      	ldr	r3, [pc, #216]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 030c 	and.w	r3, r3, #12
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	d061      	beq.n	8001f24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d146      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e68:	4b33      	ldr	r3, [pc, #204]	; (8001f38 <HAL_RCC_OscConfig+0x4cc>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6e:	f7ff fb19 	bl	80014a4 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e76:	f7ff fb15 	bl	80014a4 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e06d      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e88:	4b29      	ldr	r3, [pc, #164]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f0      	bne.n	8001e76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9c:	d108      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e9e:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	4921      	ldr	r1, [pc, #132]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eb0:	4b1f      	ldr	r3, [pc, #124]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a19      	ldr	r1, [r3, #32]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	491b      	ldr	r1, [pc, #108]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <HAL_RCC_OscConfig+0x4cc>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7ff fae9 	bl	80014a4 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed6:	f7ff fae5 	bl	80014a4 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e03d      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee8:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x46a>
 8001ef4:	e035      	b.n	8001f62 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <HAL_RCC_OscConfig+0x4cc>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff fad2 	bl	80014a4 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f04:	f7ff face 	bl	80014a4 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e026      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x498>
 8001f22:	e01e      	b.n	8001f62 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d107      	bne.n	8001f3c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e019      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40007000 	.word	0x40007000
 8001f38:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_RCC_OscConfig+0x500>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d106      	bne.n	8001f5e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d001      	beq.n	8001f62 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40021000 	.word	0x40021000

08001f70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0d0      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f84:	4b6a      	ldr	r3, [pc, #424]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d910      	bls.n	8001fb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b67      	ldr	r3, [pc, #412]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 0207 	bic.w	r2, r3, #7
 8001f9a:	4965      	ldr	r1, [pc, #404]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	4b63      	ldr	r3, [pc, #396]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0b8      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d020      	beq.n	8002002 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fcc:	4b59      	ldr	r3, [pc, #356]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4a58      	ldr	r2, [pc, #352]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fe4:	4b53      	ldr	r3, [pc, #332]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4a52      	ldr	r2, [pc, #328]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff0:	4b50      	ldr	r3, [pc, #320]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	494d      	ldr	r1, [pc, #308]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d040      	beq.n	8002090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d107      	bne.n	8002026 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002016:	4b47      	ldr	r3, [pc, #284]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d115      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e07f      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d107      	bne.n	800203e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202e:	4b41      	ldr	r3, [pc, #260]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d109      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e073      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203e:	4b3d      	ldr	r3, [pc, #244]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e06b      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800204e:	4b39      	ldr	r3, [pc, #228]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f023 0203 	bic.w	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4936      	ldr	r1, [pc, #216]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002060:	f7ff fa20 	bl	80014a4 <HAL_GetTick>
 8002064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002066:	e00a      	b.n	800207e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002068:	f7ff fa1c 	bl	80014a4 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f241 3288 	movw	r2, #5000	; 0x1388
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e053      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207e:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 020c 	and.w	r2, r3, #12
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	429a      	cmp	r2, r3
 800208e:	d1eb      	bne.n	8002068 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002090:	4b27      	ldr	r3, [pc, #156]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d210      	bcs.n	80020c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b24      	ldr	r3, [pc, #144]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 0207 	bic.w	r2, r3, #7
 80020a6:	4922      	ldr	r1, [pc, #136]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ae:	4b20      	ldr	r3, [pc, #128]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e032      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4916      	ldr	r1, [pc, #88]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d009      	beq.n	80020fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	490e      	ldr	r1, [pc, #56]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020fe:	f000 f821 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 8002102:	4602      	mov	r2, r0
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	490a      	ldr	r1, [pc, #40]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8002110:	5ccb      	ldrb	r3, [r1, r3]
 8002112:	fa22 f303 	lsr.w	r3, r2, r3
 8002116:	4a09      	ldr	r2, [pc, #36]	; (800213c <HAL_RCC_ClockConfig+0x1cc>)
 8002118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800211a:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_RCC_ClockConfig+0x1d0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff f97e 	bl	8001420 <HAL_InitTick>

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40022000 	.word	0x40022000
 8002134:	40021000 	.word	0x40021000
 8002138:	08004bf8 	.word	0x08004bf8
 800213c:	20000000 	.word	0x20000000
 8002140:	20000004 	.word	0x20000004

08002144 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002144:	b480      	push	{r7}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800215e:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	2b04      	cmp	r3, #4
 800216c:	d002      	beq.n	8002174 <HAL_RCC_GetSysClockFreq+0x30>
 800216e:	2b08      	cmp	r3, #8
 8002170:	d003      	beq.n	800217a <HAL_RCC_GetSysClockFreq+0x36>
 8002172:	e027      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002174:	4b19      	ldr	r3, [pc, #100]	; (80021dc <HAL_RCC_GetSysClockFreq+0x98>)
 8002176:	613b      	str	r3, [r7, #16]
      break;
 8002178:	e027      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	0c9b      	lsrs	r3, r3, #18
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	4a17      	ldr	r2, [pc, #92]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002184:	5cd3      	ldrb	r3, [r2, r3]
 8002186:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d010      	beq.n	80021b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002192:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	0c5b      	lsrs	r3, r3, #17
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	4a11      	ldr	r2, [pc, #68]	; (80021e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800219e:	5cd3      	ldrb	r3, [r2, r3]
 80021a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a0d      	ldr	r2, [pc, #52]	; (80021dc <HAL_RCC_GetSysClockFreq+0x98>)
 80021a6:	fb03 f202 	mul.w	r2, r3, r2
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	e004      	b.n	80021be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a0c      	ldr	r2, [pc, #48]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021b8:	fb02 f303 	mul.w	r3, r2, r3
 80021bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	613b      	str	r3, [r7, #16]
      break;
 80021c2:	e002      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <HAL_RCC_GetSysClockFreq+0x98>)
 80021c6:	613b      	str	r3, [r7, #16]
      break;
 80021c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ca:	693b      	ldr	r3, [r7, #16]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	371c      	adds	r7, #28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000
 80021dc:	007a1200 	.word	0x007a1200
 80021e0:	08004c10 	.word	0x08004c10
 80021e4:	08004c20 	.word	0x08004c20
 80021e8:	003d0900 	.word	0x003d0900

080021ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021f0:	4b02      	ldr	r3, [pc, #8]	; (80021fc <HAL_RCC_GetHCLKFreq+0x10>)
 80021f2:	681b      	ldr	r3, [r3, #0]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr
 80021fc:	20000000 	.word	0x20000000

08002200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002204:	f7ff fff2 	bl	80021ec <HAL_RCC_GetHCLKFreq>
 8002208:	4602      	mov	r2, r0
 800220a:	4b05      	ldr	r3, [pc, #20]	; (8002220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	0a1b      	lsrs	r3, r3, #8
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	4903      	ldr	r1, [pc, #12]	; (8002224 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002216:	5ccb      	ldrb	r3, [r1, r3]
 8002218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800221c:	4618      	mov	r0, r3
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40021000 	.word	0x40021000
 8002224:	08004c08 	.word	0x08004c08

08002228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800222c:	f7ff ffde 	bl	80021ec <HAL_RCC_GetHCLKFreq>
 8002230:	4602      	mov	r2, r0
 8002232:	4b05      	ldr	r3, [pc, #20]	; (8002248 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	0adb      	lsrs	r3, r3, #11
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	4903      	ldr	r1, [pc, #12]	; (800224c <HAL_RCC_GetPCLK2Freq+0x24>)
 800223e:	5ccb      	ldrb	r3, [r1, r3]
 8002240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002244:	4618      	mov	r0, r3
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40021000 	.word	0x40021000
 800224c:	08004c08 	.word	0x08004c08

08002250 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002258:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <RCC_Delay+0x34>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <RCC_Delay+0x38>)
 800225e:	fba2 2303 	umull	r2, r3, r2, r3
 8002262:	0a5b      	lsrs	r3, r3, #9
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	fb02 f303 	mul.w	r3, r2, r3
 800226a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800226c:	bf00      	nop
  }
  while (Delay --);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	1e5a      	subs	r2, r3, #1
 8002272:	60fa      	str	r2, [r7, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f9      	bne.n	800226c <RCC_Delay+0x1c>
}
 8002278:	bf00      	nop
 800227a:	bf00      	nop
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr
 8002284:	20000000 	.word	0x20000000
 8002288:	10624dd3 	.word	0x10624dd3

0800228c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d07d      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80022a8:	2300      	movs	r3, #0
 80022aa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ac:	4b4f      	ldr	r3, [pc, #316]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10d      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b8:	4b4c      	ldr	r3, [pc, #304]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	4a4b      	ldr	r2, [pc, #300]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c2:	61d3      	str	r3, [r2, #28]
 80022c4:	4b49      	ldr	r3, [pc, #292]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022d0:	2301      	movs	r3, #1
 80022d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d4:	4b46      	ldr	r3, [pc, #280]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d118      	bne.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022e0:	4b43      	ldr	r3, [pc, #268]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a42      	ldr	r2, [pc, #264]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ec:	f7ff f8da 	bl	80014a4 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f2:	e008      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f4:	f7ff f8d6 	bl	80014a4 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b64      	cmp	r3, #100	; 0x64
 8002300:	d901      	bls.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e06d      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002306:	4b3a      	ldr	r3, [pc, #232]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002312:	4b36      	ldr	r3, [pc, #216]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800231a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d02e      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	429a      	cmp	r2, r3
 800232e:	d027      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002330:	4b2e      	ldr	r3, [pc, #184]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002338:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800233a:	4b2e      	ldr	r3, [pc, #184]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800233c:	2201      	movs	r2, #1
 800233e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002340:	4b2c      	ldr	r3, [pc, #176]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002346:	4a29      	ldr	r2, [pc, #164]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d014      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002356:	f7ff f8a5 	bl	80014a4 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235c:	e00a      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235e:	f7ff f8a1 	bl	80014a4 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	f241 3288 	movw	r2, #5000	; 0x1388
 800236c:	4293      	cmp	r3, r2
 800236e:	d901      	bls.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e036      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002374:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0ee      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002380:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	4917      	ldr	r1, [pc, #92]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238e:	4313      	orrs	r3, r2
 8002390:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002392:	7dfb      	ldrb	r3, [r7, #23]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d105      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002398:	4b14      	ldr	r3, [pc, #80]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	4a13      	ldr	r2, [pc, #76]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800239e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023b0:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	490b      	ldr	r1, [pc, #44]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0310 	and.w	r3, r3, #16
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d008      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023ce:	4b07      	ldr	r3, [pc, #28]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	4904      	ldr	r1, [pc, #16]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40007000 	.word	0x40007000
 80023f4:	42420440 	.word	0x42420440

080023f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	2300      	movs	r3, #0
 8002406:	61fb      	str	r3, [r7, #28]
 8002408:	2300      	movs	r3, #0
 800240a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	2300      	movs	r3, #0
 8002412:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b10      	cmp	r3, #16
 8002418:	d00a      	beq.n	8002430 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b10      	cmp	r3, #16
 800241e:	f200 808a 	bhi.w	8002536 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d045      	beq.n	80024b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d075      	beq.n	800251a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800242e:	e082      	b.n	8002536 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002430:	4b46      	ldr	r3, [pc, #280]	; (800254c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002436:	4b45      	ldr	r3, [pc, #276]	; (800254c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d07b      	beq.n	800253a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	0c9b      	lsrs	r3, r3, #18
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	4a41      	ldr	r2, [pc, #260]	; (8002550 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800244c:	5cd3      	ldrb	r3, [r2, r3]
 800244e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d015      	beq.n	8002486 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800245a:	4b3c      	ldr	r3, [pc, #240]	; (800254c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	0c5b      	lsrs	r3, r3, #17
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	4a3b      	ldr	r2, [pc, #236]	; (8002554 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002466:	5cd3      	ldrb	r3, [r2, r3]
 8002468:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00d      	beq.n	8002490 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002474:	4a38      	ldr	r2, [pc, #224]	; (8002558 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	fbb2 f2f3 	udiv	r2, r2, r3
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	fb02 f303 	mul.w	r3, r2, r3
 8002482:	61fb      	str	r3, [r7, #28]
 8002484:	e004      	b.n	8002490 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4a34      	ldr	r2, [pc, #208]	; (800255c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800248a:	fb02 f303 	mul.w	r3, r2, r3
 800248e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002490:	4b2e      	ldr	r3, [pc, #184]	; (800254c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002498:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800249c:	d102      	bne.n	80024a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	61bb      	str	r3, [r7, #24]
      break;
 80024a2:	e04a      	b.n	800253a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	4a2d      	ldr	r2, [pc, #180]	; (8002560 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80024aa:	fba2 2303 	umull	r2, r3, r2, r3
 80024ae:	085b      	lsrs	r3, r3, #1
 80024b0:	61bb      	str	r3, [r7, #24]
      break;
 80024b2:	e042      	b.n	800253a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80024b4:	4b25      	ldr	r3, [pc, #148]	; (800254c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c4:	d108      	bne.n	80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80024d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024d4:	61bb      	str	r3, [r7, #24]
 80024d6:	e01f      	b.n	8002518 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024e2:	d109      	bne.n	80024f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80024e4:	4b19      	ldr	r3, [pc, #100]	; (800254c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80024f0:	f649 4340 	movw	r3, #40000	; 0x9c40
 80024f4:	61bb      	str	r3, [r7, #24]
 80024f6:	e00f      	b.n	8002518 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002502:	d11c      	bne.n	800253e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002504:	4b11      	ldr	r3, [pc, #68]	; (800254c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d016      	beq.n	800253e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002510:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002514:	61bb      	str	r3, [r7, #24]
      break;
 8002516:	e012      	b.n	800253e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002518:	e011      	b.n	800253e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800251a:	f7ff fe85 	bl	8002228 <HAL_RCC_GetPCLK2Freq>
 800251e:	4602      	mov	r2, r0
 8002520:	4b0a      	ldr	r3, [pc, #40]	; (800254c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	0b9b      	lsrs	r3, r3, #14
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	3301      	adds	r3, #1
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002532:	61bb      	str	r3, [r7, #24]
      break;
 8002534:	e004      	b.n	8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002536:	bf00      	nop
 8002538:	e002      	b.n	8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800253a:	bf00      	nop
 800253c:	e000      	b.n	8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800253e:	bf00      	nop
    }
  }
  return (frequency);
 8002540:	69bb      	ldr	r3, [r7, #24]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3720      	adds	r7, #32
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000
 8002550:	08004c24 	.word	0x08004c24
 8002554:	08004c34 	.word	0x08004c34
 8002558:	007a1200 	.word	0x007a1200
 800255c:	003d0900 	.word	0x003d0900
 8002560:	aaaaaaab 	.word	0xaaaaaaab

08002564 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e07a      	b.n	8002670 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7c5b      	ldrb	r3, [r3, #17]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d105      	bne.n	8002590 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7fe fdd4 	bl	8001138 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 fc88 	bl	8002eac <HAL_RTC_WaitForSynchro>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d004      	beq.n	80025ac <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2204      	movs	r2, #4
 80025a6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e061      	b.n	8002670 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 fd41 	bl	8003034 <RTC_EnterInitMode>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d004      	beq.n	80025c2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2204      	movs	r2, #4
 80025bc:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e056      	b.n	8002670 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0207 	bic.w	r2, r2, #7
 80025d0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80025da:	4b27      	ldr	r3, [pc, #156]	; (8002678 <HAL_RTC_Init+0x114>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	4a26      	ldr	r2, [pc, #152]	; (8002678 <HAL_RTC_Init+0x114>)
 80025e0:	f023 0301 	bic.w	r3, r3, #1
 80025e4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80025e6:	4b24      	ldr	r3, [pc, #144]	; (8002678 <HAL_RTC_Init+0x114>)
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	4921      	ldr	r1, [pc, #132]	; (8002678 <HAL_RTC_Init+0x114>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002600:	d003      	beq.n	800260a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	e00e      	b.n	8002628 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800260a:	2001      	movs	r0, #1
 800260c:	f7ff fef4 	bl	80023f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002610:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d104      	bne.n	8002622 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2204      	movs	r2, #4
 800261c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e026      	b.n	8002670 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	3b01      	subs	r3, #1
 8002626:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	0c1a      	lsrs	r2, r3, #16
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f002 020f 	and.w	r2, r2, #15
 8002634:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	b292      	uxth	r2, r2
 800263e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 fd1f 	bl	8003084 <RTC_ExitInitMode>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d004      	beq.n	8002656 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2204      	movs	r2, #4
 8002650:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e00c      	b.n	8002670 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800266e:	2300      	movs	r3, #0
  }
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40006c00 	.word	0x40006c00

0800267c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800267c:	b590      	push	{r4, r7, lr}
 800267e:	b087      	sub	sp, #28
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	2300      	movs	r3, #0
 800268e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <HAL_RTC_SetTime+0x20>
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e080      	b.n	80027a2 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	7c1b      	ldrb	r3, [r3, #16]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_RTC_SetTime+0x30>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e07a      	b.n	80027a2 <HAL_RTC_SetTime+0x126>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2201      	movs	r2, #1
 80026b0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2202      	movs	r2, #2
 80026b6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d113      	bne.n	80026e6 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80026c8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	785b      	ldrb	r3, [r3, #1]
 80026d0:	4619      	mov	r1, r3
 80026d2:	460b      	mov	r3, r1
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	1a5b      	subs	r3, r3, r1
 80026d8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80026da:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80026e0:	4413      	add	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	e01e      	b.n	8002724 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 fd0f 	bl	800310e <RTC_Bcd2ToByte>
 80026f0:	4603      	mov	r3, r0
 80026f2:	461a      	mov	r2, r3
 80026f4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80026f8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	785b      	ldrb	r3, [r3, #1]
 8002700:	4618      	mov	r0, r3
 8002702:	f000 fd04 	bl	800310e <RTC_Bcd2ToByte>
 8002706:	4603      	mov	r3, r0
 8002708:	461a      	mov	r2, r3
 800270a:	4613      	mov	r3, r2
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	1a9b      	subs	r3, r3, r2
 8002710:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002712:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	789b      	ldrb	r3, [r3, #2]
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fcf8 	bl	800310e <RTC_Bcd2ToByte>
 800271e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002720:	4423      	add	r3, r4
 8002722:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002724:	6979      	ldr	r1, [r7, #20]
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 fc1d 	bl	8002f66 <RTC_WriteTimeCounter>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d007      	beq.n	8002742 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2204      	movs	r2, #4
 8002736:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e02f      	b.n	80027a2 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0205 	bic.w	r2, r2, #5
 8002750:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 fc2e 	bl	8002fb4 <RTC_ReadAlarmCounter>
 8002758:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002760:	d018      	beq.n	8002794 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	429a      	cmp	r2, r3
 8002768:	d214      	bcs.n	8002794 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002770:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002774:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002776:	6939      	ldr	r1, [r7, #16]
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 fc34 	bl	8002fe6 <RTC_WriteAlarmCounter>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d007      	beq.n	8002794 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2204      	movs	r2, #4
 8002788:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e006      	b.n	80027a2 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2201      	movs	r2, #1
 8002798:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80027a0:	2300      	movs	r3, #0
  }
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	371c      	adds	r7, #28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd90      	pop	{r4, r7, pc}
	...

080027ac <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	61bb      	str	r3, [r7, #24]
 80027bc:	2300      	movs	r3, #0
 80027be:	61fb      	str	r3, [r7, #28]
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	2300      	movs	r3, #0
 80027c6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <HAL_RTC_GetTime+0x28>
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0b5      	b.n	8002944 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e0ac      	b.n	8002944 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 fb8b 	bl	8002f06 <RTC_ReadTimeCounter>
 80027f0:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	4a55      	ldr	r2, [pc, #340]	; (800294c <HAL_RTC_GetTime+0x1a0>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	0adb      	lsrs	r3, r3, #11
 80027fc:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4b52      	ldr	r3, [pc, #328]	; (800294c <HAL_RTC_GetTime+0x1a0>)
 8002802:	fba3 1302 	umull	r1, r3, r3, r2
 8002806:	0adb      	lsrs	r3, r3, #11
 8002808:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	4a4f      	ldr	r2, [pc, #316]	; (8002950 <HAL_RTC_GetTime+0x1a4>)
 8002814:	fba2 2303 	umull	r2, r3, r2, r3
 8002818:	095b      	lsrs	r3, r3, #5
 800281a:	b2da      	uxtb	r2, r3
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	4a4a      	ldr	r2, [pc, #296]	; (800294c <HAL_RTC_GetTime+0x1a0>)
 8002824:	fba2 1203 	umull	r1, r2, r2, r3
 8002828:	0ad2      	lsrs	r2, r2, #11
 800282a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800282e:	fb01 f202 	mul.w	r2, r1, r2
 8002832:	1a9a      	subs	r2, r3, r2
 8002834:	4b46      	ldr	r3, [pc, #280]	; (8002950 <HAL_RTC_GetTime+0x1a4>)
 8002836:	fba3 1302 	umull	r1, r3, r3, r2
 800283a:	0959      	lsrs	r1, r3, #5
 800283c:	460b      	mov	r3, r1
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	1a5b      	subs	r3, r3, r1
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	1ad1      	subs	r1, r2, r3
 8002846:	b2ca      	uxtb	r2, r1
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	2b17      	cmp	r3, #23
 8002850:	d955      	bls.n	80028fe <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4a3f      	ldr	r2, [pc, #252]	; (8002954 <HAL_RTC_GetTime+0x1a8>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	091b      	lsrs	r3, r3, #4
 800285c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800285e:	6939      	ldr	r1, [r7, #16]
 8002860:	4b3c      	ldr	r3, [pc, #240]	; (8002954 <HAL_RTC_GetTime+0x1a8>)
 8002862:	fba3 2301 	umull	r2, r3, r3, r1
 8002866:	091a      	lsrs	r2, r3, #4
 8002868:	4613      	mov	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	4413      	add	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	1aca      	subs	r2, r1, r3
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 fb9b 	bl	8002fb4 <RTC_ReadAlarmCounter>
 800287e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002886:	d008      	beq.n	800289a <HAL_RTC_GetTime+0xee>
 8002888:	69fa      	ldr	r2, [r7, #28]
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	429a      	cmp	r2, r3
 800288e:	d904      	bls.n	800289a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002890:	69fa      	ldr	r2, [r7, #28]
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	61fb      	str	r3, [r7, #28]
 8002898:	e002      	b.n	80028a0 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800289a:	f04f 33ff 	mov.w	r3, #4294967295
 800289e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	4a2d      	ldr	r2, [pc, #180]	; (8002958 <HAL_RTC_GetTime+0x1ac>)
 80028a4:	fb02 f303 	mul.w	r3, r2, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80028ae:	69b9      	ldr	r1, [r7, #24]
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 fb58 	bl	8002f66 <RTC_WriteTimeCounter>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e041      	b.n	8002944 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c6:	d00c      	beq.n	80028e2 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80028c8:	69fa      	ldr	r2, [r7, #28]
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	4413      	add	r3, r2
 80028ce:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80028d0:	69f9      	ldr	r1, [r7, #28]
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 fb87 	bl	8002fe6 <RTC_WriteAlarmCounter>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e030      	b.n	8002944 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80028e2:	69f9      	ldr	r1, [r7, #28]
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f000 fb7e 	bl	8002fe6 <RTC_WriteAlarmCounter>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e027      	b.n	8002944 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80028f4:	6979      	ldr	r1, [r7, #20]
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 fc26 	bl	8003148 <RTC_DateUpdate>
 80028fc:	e003      	b.n	8002906 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	b2da      	uxtb	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d01a      	beq.n	8002942 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f000 fbdf 	bl	80030d4 <RTC_ByteToBcd2>
 8002916:	4603      	mov	r3, r0
 8002918:	461a      	mov	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	785b      	ldrb	r3, [r3, #1]
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fbd6 	bl	80030d4 <RTC_ByteToBcd2>
 8002928:	4603      	mov	r3, r0
 800292a:	461a      	mov	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	789b      	ldrb	r3, [r3, #2]
 8002934:	4618      	mov	r0, r3
 8002936:	f000 fbcd 	bl	80030d4 <RTC_ByteToBcd2>
 800293a:	4603      	mov	r3, r0
 800293c:	461a      	mov	r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3720      	adds	r7, #32
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	91a2b3c5 	.word	0x91a2b3c5
 8002950:	88888889 	.word	0x88888889
 8002954:	aaaaaaab 	.word	0xaaaaaaab
 8002958:	00015180 	.word	0x00015180

0800295c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	61fb      	str	r3, [r7, #28]
 800296c:	2300      	movs	r3, #0
 800296e:	61bb      	str	r3, [r7, #24]
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <HAL_RTC_SetDate+0x24>
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e097      	b.n	8002ab4 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	7c1b      	ldrb	r3, [r3, #16]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_RTC_SetDate+0x34>
 800298c:	2302      	movs	r3, #2
 800298e:	e091      	b.n	8002ab4 <HAL_RTC_SetDate+0x158>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2201      	movs	r2, #1
 8002994:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2202      	movs	r2, #2
 800299a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10c      	bne.n	80029bc <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	78da      	ldrb	r2, [r3, #3]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	785a      	ldrb	r2, [r3, #1]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	789a      	ldrb	r2, [r3, #2]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	739a      	strb	r2, [r3, #14]
 80029ba:	e01a      	b.n	80029f2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	78db      	ldrb	r3, [r3, #3]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 fba4 	bl	800310e <RTC_Bcd2ToByte>
 80029c6:	4603      	mov	r3, r0
 80029c8:	461a      	mov	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	785b      	ldrb	r3, [r3, #1]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fb9b 	bl	800310e <RTC_Bcd2ToByte>
 80029d8:	4603      	mov	r3, r0
 80029da:	461a      	mov	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	789b      	ldrb	r3, [r3, #2]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 fb92 	bl	800310e <RTC_Bcd2ToByte>
 80029ea:	4603      	mov	r3, r0
 80029ec:	461a      	mov	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	7bdb      	ldrb	r3, [r3, #15]
 80029f6:	4618      	mov	r0, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	7b59      	ldrb	r1, [r3, #13]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	7b9b      	ldrb	r3, [r3, #14]
 8002a00:	461a      	mov	r2, r3
 8002a02:	f000 fc7d 	bl	8003300 <RTC_WeekDayNum>
 8002a06:	4603      	mov	r3, r0
 8002a08:	461a      	mov	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	7b1a      	ldrb	r2, [r3, #12]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 fa75 	bl	8002f06 <RTC_ReadTimeCounter>
 8002a1c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	4a26      	ldr	r2, [pc, #152]	; (8002abc <HAL_RTC_SetDate+0x160>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	0adb      	lsrs	r3, r3, #11
 8002a28:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2b18      	cmp	r3, #24
 8002a2e:	d93a      	bls.n	8002aa6 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	4a23      	ldr	r2, [pc, #140]	; (8002ac0 <HAL_RTC_SetDate+0x164>)
 8002a34:	fba2 2303 	umull	r2, r3, r2, r3
 8002a38:	091b      	lsrs	r3, r3, #4
 8002a3a:	4a22      	ldr	r2, [pc, #136]	; (8002ac4 <HAL_RTC_SetDate+0x168>)
 8002a3c:	fb02 f303 	mul.w	r3, r2, r3
 8002a40:	69fa      	ldr	r2, [r7, #28]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002a46:	69f9      	ldr	r1, [r7, #28]
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 fa8c 	bl	8002f66 <RTC_WriteTimeCounter>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d007      	beq.n	8002a64 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2204      	movs	r2, #4
 8002a58:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e027      	b.n	8002ab4 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 faa5 	bl	8002fb4 <RTC_ReadAlarmCounter>
 8002a6a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a72:	d018      	beq.n	8002aa6 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d214      	bcs.n	8002aa6 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002a82:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002a86:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002a88:	69b9      	ldr	r1, [r7, #24]
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 faab 	bl	8002fe6 <RTC_WriteAlarmCounter>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d007      	beq.n	8002aa6 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2204      	movs	r2, #4
 8002a9a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e006      	b.n	8002ab4 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3720      	adds	r7, #32
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	91a2b3c5 	.word	0x91a2b3c5
 8002ac0:	aaaaaaab 	.word	0xaaaaaaab
 8002ac4:	00015180 	.word	0x00015180

08002ac8 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002ac8:	b590      	push	{r4, r7, lr}
 8002aca:	b089      	sub	sp, #36	; 0x24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8002ad8:	f107 0314 	add.w	r3, r7, #20
 8002adc:	2100      	movs	r1, #0
 8002ade:	460a      	mov	r2, r1
 8002ae0:	801a      	strh	r2, [r3, #0]
 8002ae2:	460a      	mov	r2, r1
 8002ae4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <HAL_RTC_SetAlarm+0x2a>
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RTC_SetAlarm+0x2e>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e07d      	b.n	8002bf2 <HAL_RTC_SetAlarm+0x12a>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	7c1b      	ldrb	r3, [r3, #16]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_RTC_SetAlarm+0x3a>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e077      	b.n	8002bf2 <HAL_RTC_SetAlarm+0x12a>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002b0e:	f107 0314 	add.w	r3, r7, #20
 8002b12:	2200      	movs	r2, #0
 8002b14:	4619      	mov	r1, r3
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f7ff fe48 	bl	80027ac <HAL_RTC_GetTime>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_RTC_SetAlarm+0x5e>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e065      	b.n	8002bf2 <HAL_RTC_SetAlarm+0x12a>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002b26:	7d3b      	ldrb	r3, [r7, #20]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002b2e:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8002b32:	7d7b      	ldrb	r3, [r7, #21]
 8002b34:	4619      	mov	r1, r3
 8002b36:	460b      	mov	r3, r1
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	1a5b      	subs	r3, r3, r1
 8002b3c:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002b3e:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8002b40:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002b42:	4413      	add	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d113      	bne.n	8002b74 <HAL_RTC_SetAlarm+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002b56:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	785b      	ldrb	r3, [r3, #1]
 8002b5e:	4619      	mov	r1, r3
 8002b60:	460b      	mov	r3, r1
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	1a5b      	subs	r3, r3, r1
 8002b66:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002b68:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002b6e:	4413      	add	r3, r2
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	e01e      	b.n	8002bb2 <HAL_RTC_SetAlarm+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 fac8 	bl	800310e <RTC_Bcd2ToByte>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	461a      	mov	r2, r3
 8002b82:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002b86:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	785b      	ldrb	r3, [r3, #1]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fabd 	bl	800310e <RTC_Bcd2ToByte>
 8002b94:	4603      	mov	r3, r0
 8002b96:	461a      	mov	r2, r3
 8002b98:	4613      	mov	r3, r2
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002ba0:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	789b      	ldrb	r3, [r3, #2]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 fab1 	bl	800310e <RTC_Bcd2ToByte>
 8002bac:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002bae:	4423      	add	r3, r4
 8002bb0:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8002bb2:	69fa      	ldr	r2, [r7, #28]
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d205      	bcs.n	8002bc6 <HAL_RTC_SetAlarm+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002bc0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002bc4:	61fb      	str	r3, [r7, #28]
  }

  /* Write Alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002bc6:	69f9      	ldr	r1, [r7, #28]
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 fa0c 	bl	8002fe6 <RTC_WriteAlarmCounter>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d007      	beq.n	8002be4 <HAL_RTC_SetAlarm+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2204      	movs	r2, #4
 8002bd8:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e006      	b.n	8002bf2 <HAL_RTC_SetAlarm+0x12a>
  }
  else
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
  }
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3724      	adds	r7, #36	; 0x24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd90      	pop	{r4, r7, pc}
	...

08002bfc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002bfc:	b590      	push	{r4, r7, lr}
 8002bfe:	b089      	sub	sp, #36	; 0x24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8002c0c:	f107 0314 	add.w	r3, r7, #20
 8002c10:	2100      	movs	r1, #0
 8002c12:	460a      	mov	r2, r1
 8002c14:	801a      	strh	r2, [r3, #0]
 8002c16:	460a      	mov	r2, r1
 8002c18:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <HAL_RTC_SetAlarm_IT+0x2a>
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e099      	b.n	8002d5e <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	7c1b      	ldrb	r3, [r3, #16]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_RTC_SetAlarm_IT+0x3a>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e093      	b.n	8002d5e <HAL_RTC_SetAlarm_IT+0x162>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002c42:	f107 0314 	add.w	r3, r7, #20
 8002c46:	2200      	movs	r2, #0
 8002c48:	4619      	mov	r1, r3
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f7ff fdae 	bl	80027ac <HAL_RTC_GetTime>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e081      	b.n	8002d5e <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002c5a:	7d3b      	ldrb	r3, [r7, #20]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002c62:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8002c66:	7d7b      	ldrb	r3, [r7, #21]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	1a5b      	subs	r3, r3, r1
 8002c70:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002c72:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8002c74:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002c76:	4413      	add	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d113      	bne.n	8002ca8 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002c8a:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	785b      	ldrb	r3, [r3, #1]
 8002c92:	4619      	mov	r1, r3
 8002c94:	460b      	mov	r3, r1
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	1a5b      	subs	r3, r3, r1
 8002c9a:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002c9c:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002ca2:	4413      	add	r3, r2
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	e01e      	b.n	8002ce6 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 fa2e 	bl	800310e <RTC_Bcd2ToByte>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002cba:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	785b      	ldrb	r3, [r3, #1]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 fa23 	bl	800310e <RTC_Bcd2ToByte>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	461a      	mov	r2, r3
 8002ccc:	4613      	mov	r3, r2
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	1a9b      	subs	r3, r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002cd4:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	789b      	ldrb	r3, [r3, #2]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fa17 	bl	800310e <RTC_Bcd2ToByte>
 8002ce0:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002ce2:	4423      	add	r3, r4
 8002ce4:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8002ce6:	69fa      	ldr	r2, [r7, #28]
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d205      	bcs.n	8002cfa <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002cf4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002cf8:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002cfa:	69f9      	ldr	r1, [r7, #28]
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 f972 	bl	8002fe6 <RTC_WriteAlarmCounter>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d007      	beq.n	8002d18 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e022      	b.n	8002d5e <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0202 	bic.w	r2, r2, #2
 8002d26:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 0202 	orr.w	r2, r2, #2
 8002d36:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002d38:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <HAL_RTC_SetAlarm_IT+0x16c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a0a      	ldr	r2, [pc, #40]	; (8002d68 <HAL_RTC_SetAlarm_IT+0x16c>)
 8002d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d42:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002d44:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <HAL_RTC_SetAlarm_IT+0x16c>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	4a07      	ldr	r2, [pc, #28]	; (8002d68 <HAL_RTC_SetAlarm_IT+0x16c>)
 8002d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d4e:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2201      	movs	r2, #1
 8002d54:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
  }
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3724      	adds	r7, #36	; 0x24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd90      	pop	{r4, r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40010400 	.word	0x40010400

08002d6c <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	603b      	str	r3, [r7, #0]
  uint32_t counter_alarm = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Alarm);

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <HAL_RTC_GetAlarm+0x1e>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_RTC_GetAlarm+0x22>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e05a      	b.n	8002e44 <HAL_RTC_GetAlarm+0xd8>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  /* Read Alarm counter in RTC registers */
  counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f910 	bl	8002fb4 <RTC_ReadAlarmCounter>
 8002d94:	6178      	str	r0, [r7, #20]

  /* Fill the structure with the read parameters */
  /* Set hours in a day range (between 0 to 24)*/
  sAlarm->AlarmTime.Hours   = (uint32_t)((counter_alarm / 3600U) % 24U);
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	4a2c      	ldr	r2, [pc, #176]	; (8002e4c <HAL_RTC_GetAlarm+0xe0>)
 8002d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9e:	0ad9      	lsrs	r1, r3, #11
 8002da0:	4b2b      	ldr	r3, [pc, #172]	; (8002e50 <HAL_RTC_GetAlarm+0xe4>)
 8002da2:	fba3 2301 	umull	r2, r3, r3, r1
 8002da6:	091a      	lsrs	r2, r3, #4
 8002da8:	4613      	mov	r3, r2
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	4413      	add	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	1aca      	subs	r2, r1, r3
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((counter_alarm % 3600U) / 60U);
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	4b24      	ldr	r3, [pc, #144]	; (8002e4c <HAL_RTC_GetAlarm+0xe0>)
 8002dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8002dc0:	0adb      	lsrs	r3, r3, #11
 8002dc2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002dc6:	fb01 f303 	mul.w	r3, r1, r3
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	4a21      	ldr	r2, [pc, #132]	; (8002e54 <HAL_RTC_GetAlarm+0xe8>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)((counter_alarm % 3600U) % 60U);
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	4a1b      	ldr	r2, [pc, #108]	; (8002e4c <HAL_RTC_GetAlarm+0xe0>)
 8002dde:	fba2 1203 	umull	r1, r2, r2, r3
 8002de2:	0ad2      	lsrs	r2, r2, #11
 8002de4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002de8:	fb01 f202 	mul.w	r2, r1, r2
 8002dec:	1a9a      	subs	r2, r3, r2
 8002dee:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <HAL_RTC_GetAlarm+0xe8>)
 8002df0:	fba3 1302 	umull	r1, r3, r3, r2
 8002df4:	0959      	lsrs	r1, r3, #5
 8002df6:	460b      	mov	r3, r1
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	1a5b      	subs	r3, r3, r1
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	1ad1      	subs	r1, r2, r3
 8002e00:	b2ca      	uxtb	r2, r1
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	709a      	strb	r2, [r3, #2]

  if (Format != RTC_FORMAT_BIN)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d01a      	beq.n	8002e42 <HAL_RTC_GetAlarm+0xd6>
  {
    sAlarm->AlarmTime.Hours   = RTC_ByteToBcd2(sAlarm->AlarmTime.Hours);
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 f95f 	bl	80030d4 <RTC_ByteToBcd2>
 8002e16:	4603      	mov	r3, r0
 8002e18:	461a      	mov	r2, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes);
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	785b      	ldrb	r3, [r3, #1]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 f956 	bl	80030d4 <RTC_ByteToBcd2>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds);
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	789b      	ldrb	r3, [r3, #2]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 f94d 	bl	80030d4 <RTC_ByteToBcd2>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	91a2b3c5 	.word	0x91a2b3c5
 8002e50:	aaaaaaab 	.word	0xaaaaaaab
 8002e54:	88888889 	.word	0x88888889

08002e58 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d011      	beq.n	8002e92 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7fd fef3 	bl	8000c68 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0202 	bic.w	r2, r2, #2
 8002e90:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002e92:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8002e94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e98:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	745a      	strb	r2, [r3, #17]
}
 8002ea0:	bf00      	nop
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40010400 	.word	0x40010400

08002eac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e01d      	b.n	8002efe <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0208 	bic.w	r2, r2, #8
 8002ed0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002ed2:	f7fe fae7 	bl	80014a4 <HAL_GetTick>
 8002ed6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002ed8:	e009      	b.n	8002eee <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002eda:	f7fe fae3 	bl	80014a4 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ee8:	d901      	bls.n	8002eee <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e007      	b.n	8002efe <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0ee      	beq.n	8002eda <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b087      	sub	sp, #28
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	827b      	strh	r3, [r7, #18]
 8002f12:	2300      	movs	r3, #0
 8002f14:	823b      	strh	r3, [r7, #16]
 8002f16:	2300      	movs	r3, #0
 8002f18:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002f36:	8a7a      	ldrh	r2, [r7, #18]
 8002f38:	8a3b      	ldrh	r3, [r7, #16]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d008      	beq.n	8002f50 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002f3e:	8a3b      	ldrh	r3, [r7, #16]
 8002f40:	041a      	lsls	r2, r3, #16
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	e004      	b.n	8002f5a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002f50:	8a7b      	ldrh	r3, [r7, #18]
 8002f52:	041a      	lsls	r2, r3, #16
 8002f54:	89fb      	ldrh	r3, [r7, #14]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002f5a:	697b      	ldr	r3, [r7, #20]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	371c      	adds	r7, #28
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr

08002f66 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b084      	sub	sp, #16
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
 8002f6e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f85d 	bl	8003034 <RTC_EnterInitMode>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
 8002f84:	e011      	b.n	8002faa <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	0c12      	lsrs	r2, r2, #16
 8002f8e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	b292      	uxth	r2, r2
 8002f98:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f872 	bl	8003084 <RTC_ExitInitMode>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	81fb      	strh	r3, [r7, #14]
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002fd4:	89fb      	ldrh	r3, [r7, #14]
 8002fd6:	041a      	lsls	r2, r3, #16
 8002fd8:	89bb      	ldrh	r3, [r7, #12]
 8002fda:	4313      	orrs	r3, r2
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr

08002fe6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b084      	sub	sp, #16
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
 8002fee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f81d 	bl	8003034 <RTC_EnterInitMode>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
 8003004:	e011      	b.n	800302a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	0c12      	lsrs	r2, r2, #16
 800300e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	b292      	uxth	r2, r2
 8003018:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f832 	bl	8003084 <RTC_ExitInitMode>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800302a:	7bfb      	ldrb	r3, [r7, #15]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003040:	f7fe fa30 	bl	80014a4 <HAL_GetTick>
 8003044:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003046:	e009      	b.n	800305c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003048:	f7fe fa2c 	bl	80014a4 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003056:	d901      	bls.n	800305c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e00f      	b.n	800307c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f003 0320 	and.w	r3, r3, #32
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0ee      	beq.n	8003048 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f042 0210 	orr.w	r2, r2, #16
 8003078:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0210 	bic.w	r2, r2, #16
 800309e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80030a0:	f7fe fa00 	bl	80014a4 <HAL_GetTick>
 80030a4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80030a6:	e009      	b.n	80030bc <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80030a8:	f7fe f9fc 	bl	80014a4 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030b6:	d901      	bls.n	80030bc <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e007      	b.n	80030cc <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0ee      	beq.n	80030a8 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80030e2:	e005      	b.n	80030f0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	3301      	adds	r3, #1
 80030e8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	3b0a      	subs	r3, #10
 80030ee:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	2b09      	cmp	r3, #9
 80030f4:	d8f6      	bhi.n	80030e4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	4313      	orrs	r3, r2
 8003102:	b2db      	uxtb	r3, r3
}
 8003104:	4618      	mov	r0, r3
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr

0800310e <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800310e:	b480      	push	{r7}
 8003110:	b085      	sub	sp, #20
 8003112:	af00      	add	r7, sp, #0
 8003114:	4603      	mov	r3, r0
 8003116:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	091b      	lsrs	r3, r3, #4
 8003120:	b2db      	uxtb	r3, r3
 8003122:	461a      	mov	r2, r3
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	f003 030f 	and.w	r3, r3, #15
 8003134:	b2da      	uxtb	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	4413      	add	r3, r2
 800313c:	b2db      	uxtb	r3, r3
}
 800313e:	4618      	mov	r0, r3
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr

08003148 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	2300      	movs	r3, #0
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800315e:	2300      	movs	r3, #0
 8003160:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	7bdb      	ldrb	r3, [r3, #15]
 8003166:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	7b5b      	ldrb	r3, [r3, #13]
 800316c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	7b9b      	ldrb	r3, [r3, #14]
 8003172:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003174:	2300      	movs	r3, #0
 8003176:	60bb      	str	r3, [r7, #8]
 8003178:	e06f      	b.n	800325a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d011      	beq.n	80031a4 <RTC_DateUpdate+0x5c>
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	2b03      	cmp	r3, #3
 8003184:	d00e      	beq.n	80031a4 <RTC_DateUpdate+0x5c>
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	2b05      	cmp	r3, #5
 800318a:	d00b      	beq.n	80031a4 <RTC_DateUpdate+0x5c>
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	2b07      	cmp	r3, #7
 8003190:	d008      	beq.n	80031a4 <RTC_DateUpdate+0x5c>
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	2b08      	cmp	r3, #8
 8003196:	d005      	beq.n	80031a4 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	2b0a      	cmp	r3, #10
 800319c:	d002      	beq.n	80031a4 <RTC_DateUpdate+0x5c>
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	2b0c      	cmp	r3, #12
 80031a2:	d117      	bne.n	80031d4 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2b1e      	cmp	r3, #30
 80031a8:	d803      	bhi.n	80031b2 <RTC_DateUpdate+0x6a>
      {
        day++;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	3301      	adds	r3, #1
 80031ae:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80031b0:	e050      	b.n	8003254 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	2b0c      	cmp	r3, #12
 80031b6:	d005      	beq.n	80031c4 <RTC_DateUpdate+0x7c>
        {
          month++;
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	3301      	adds	r3, #1
 80031bc:	613b      	str	r3, [r7, #16]
          day = 1U;
 80031be:	2301      	movs	r3, #1
 80031c0:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80031c2:	e047      	b.n	8003254 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80031c4:	2301      	movs	r3, #1
 80031c6:	613b      	str	r3, [r7, #16]
          day = 1U;
 80031c8:	2301      	movs	r3, #1
 80031ca:	60fb      	str	r3, [r7, #12]
          year++;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	3301      	adds	r3, #1
 80031d0:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80031d2:	e03f      	b.n	8003254 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d008      	beq.n	80031ec <RTC_DateUpdate+0xa4>
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	2b06      	cmp	r3, #6
 80031de:	d005      	beq.n	80031ec <RTC_DateUpdate+0xa4>
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	2b09      	cmp	r3, #9
 80031e4:	d002      	beq.n	80031ec <RTC_DateUpdate+0xa4>
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	2b0b      	cmp	r3, #11
 80031ea:	d10c      	bne.n	8003206 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2b1d      	cmp	r3, #29
 80031f0:	d803      	bhi.n	80031fa <RTC_DateUpdate+0xb2>
      {
        day++;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	3301      	adds	r3, #1
 80031f6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80031f8:	e02c      	b.n	8003254 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	3301      	adds	r3, #1
 80031fe:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003200:	2301      	movs	r3, #1
 8003202:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003204:	e026      	b.n	8003254 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d123      	bne.n	8003254 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2b1b      	cmp	r3, #27
 8003210:	d803      	bhi.n	800321a <RTC_DateUpdate+0xd2>
      {
        day++;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	3301      	adds	r3, #1
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	e01c      	b.n	8003254 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2b1c      	cmp	r3, #28
 800321e:	d111      	bne.n	8003244 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	b29b      	uxth	r3, r3
 8003224:	4618      	mov	r0, r3
 8003226:	f000 f839 	bl	800329c <RTC_IsLeapYear>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <RTC_DateUpdate+0xf0>
        {
          day++;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	3301      	adds	r3, #1
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	e00d      	b.n	8003254 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	3301      	adds	r3, #1
 800323c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800323e:	2301      	movs	r3, #1
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	e007      	b.n	8003254 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b1d      	cmp	r3, #29
 8003248:	d104      	bne.n	8003254 <RTC_DateUpdate+0x10c>
      {
        month++;
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	3301      	adds	r3, #1
 800324e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003250:	2301      	movs	r3, #1
 8003252:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	3301      	adds	r3, #1
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d38b      	bcc.n	800317a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	b2da      	uxtb	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	b2da      	uxtb	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	b2da      	uxtb	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	b2db      	uxtb	r3, r3
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	b2d2      	uxtb	r2, r2
 8003282:	4619      	mov	r1, r3
 8003284:	6978      	ldr	r0, [r7, #20]
 8003286:	f000 f83b 	bl	8003300 <RTC_WeekDayNum>
 800328a:	4603      	mov	r3, r0
 800328c:	461a      	mov	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	731a      	strb	r2, [r3, #12]
}
 8003292:	bf00      	nop
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	e01d      	b.n	80032f2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	4a10      	ldr	r2, [pc, #64]	; (80032fc <RTC_IsLeapYear+0x60>)
 80032ba:	fba2 1203 	umull	r1, r2, r2, r3
 80032be:	0952      	lsrs	r2, r2, #5
 80032c0:	2164      	movs	r1, #100	; 0x64
 80032c2:	fb01 f202 	mul.w	r2, r1, r2
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e00f      	b.n	80032f2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80032d2:	88fb      	ldrh	r3, [r7, #6]
 80032d4:	4a09      	ldr	r2, [pc, #36]	; (80032fc <RTC_IsLeapYear+0x60>)
 80032d6:	fba2 1203 	umull	r1, r2, r2, r3
 80032da:	09d2      	lsrs	r2, r2, #7
 80032dc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80032e0:	fb01 f202 	mul.w	r2, r1, r2
 80032e4:	1a9b      	subs	r3, r3, r2
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e000      	b.n	80032f2 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80032f0:	2300      	movs	r3, #0
  }
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr
 80032fc:	51eb851f 	.word	0x51eb851f

08003300 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	70fb      	strb	r3, [r7, #3]
 800330c:	4613      	mov	r3, r2
 800330e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	60bb      	str	r3, [r7, #8]
 8003314:	2300      	movs	r3, #0
 8003316:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800331e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	2b02      	cmp	r3, #2
 8003324:	d82d      	bhi.n	8003382 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	4613      	mov	r3, r2
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	4413      	add	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	4a2c      	ldr	r2, [pc, #176]	; (80033e4 <RTC_WeekDayNum+0xe4>)
 8003334:	fba2 2303 	umull	r2, r3, r2, r3
 8003338:	085a      	lsrs	r2, r3, #1
 800333a:	78bb      	ldrb	r3, [r7, #2]
 800333c:	441a      	add	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	441a      	add	r2, r3
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	3b01      	subs	r3, #1
 8003346:	089b      	lsrs	r3, r3, #2
 8003348:	441a      	add	r2, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	3b01      	subs	r3, #1
 800334e:	4926      	ldr	r1, [pc, #152]	; (80033e8 <RTC_WeekDayNum+0xe8>)
 8003350:	fba1 1303 	umull	r1, r3, r1, r3
 8003354:	095b      	lsrs	r3, r3, #5
 8003356:	1ad2      	subs	r2, r2, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	3b01      	subs	r3, #1
 800335c:	4922      	ldr	r1, [pc, #136]	; (80033e8 <RTC_WeekDayNum+0xe8>)
 800335e:	fba1 1303 	umull	r1, r3, r1, r3
 8003362:	09db      	lsrs	r3, r3, #7
 8003364:	4413      	add	r3, r2
 8003366:	1d1a      	adds	r2, r3, #4
 8003368:	4b20      	ldr	r3, [pc, #128]	; (80033ec <RTC_WeekDayNum+0xec>)
 800336a:	fba3 1302 	umull	r1, r3, r3, r2
 800336e:	1ad1      	subs	r1, r2, r3
 8003370:	0849      	lsrs	r1, r1, #1
 8003372:	440b      	add	r3, r1
 8003374:	0899      	lsrs	r1, r3, #2
 8003376:	460b      	mov	r3, r1
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	1a5b      	subs	r3, r3, r1
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	e029      	b.n	80033d6 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003382:	78fa      	ldrb	r2, [r7, #3]
 8003384:	4613      	mov	r3, r2
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	4413      	add	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	4a15      	ldr	r2, [pc, #84]	; (80033e4 <RTC_WeekDayNum+0xe4>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	085a      	lsrs	r2, r3, #1
 8003396:	78bb      	ldrb	r3, [r7, #2]
 8003398:	441a      	add	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	441a      	add	r2, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	089b      	lsrs	r3, r3, #2
 80033a2:	441a      	add	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4910      	ldr	r1, [pc, #64]	; (80033e8 <RTC_WeekDayNum+0xe8>)
 80033a8:	fba1 1303 	umull	r1, r3, r1, r3
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	1ad2      	subs	r2, r2, r3
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	490d      	ldr	r1, [pc, #52]	; (80033e8 <RTC_WeekDayNum+0xe8>)
 80033b4:	fba1 1303 	umull	r1, r3, r1, r3
 80033b8:	09db      	lsrs	r3, r3, #7
 80033ba:	4413      	add	r3, r2
 80033bc:	1c9a      	adds	r2, r3, #2
 80033be:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <RTC_WeekDayNum+0xec>)
 80033c0:	fba3 1302 	umull	r1, r3, r3, r2
 80033c4:	1ad1      	subs	r1, r2, r3
 80033c6:	0849      	lsrs	r1, r1, #1
 80033c8:	440b      	add	r3, r1
 80033ca:	0899      	lsrs	r1, r3, #2
 80033cc:	460b      	mov	r3, r1
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	1a5b      	subs	r3, r3, r1
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	b2db      	uxtb	r3, r3
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr
 80033e4:	38e38e39 	.word	0x38e38e39
 80033e8:	51eb851f 	.word	0x51eb851f
 80033ec:	24924925 	.word	0x24924925

080033f0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e041      	b.n	8003486 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fd feba 	bl	8001190 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3304      	adds	r3, #4
 800342c:	4619      	mov	r1, r3
 800342e:	4610      	mov	r0, r2
 8003430:	f000 fb46 	bl	8003ac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d104      	bne.n	80034ae <HAL_TIM_IC_Start_IT+0x1e>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	e013      	b.n	80034d6 <HAL_TIM_IC_Start_IT+0x46>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d104      	bne.n	80034be <HAL_TIM_IC_Start_IT+0x2e>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	e00b      	b.n	80034d6 <HAL_TIM_IC_Start_IT+0x46>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d104      	bne.n	80034ce <HAL_TIM_IC_Start_IT+0x3e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	e003      	b.n	80034d6 <HAL_TIM_IC_Start_IT+0x46>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d104      	bne.n	80034e8 <HAL_TIM_IC_Start_IT+0x58>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	e013      	b.n	8003510 <HAL_TIM_IC_Start_IT+0x80>
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d104      	bne.n	80034f8 <HAL_TIM_IC_Start_IT+0x68>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	e00b      	b.n	8003510 <HAL_TIM_IC_Start_IT+0x80>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d104      	bne.n	8003508 <HAL_TIM_IC_Start_IT+0x78>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003504:	b2db      	uxtb	r3, r3
 8003506:	e003      	b.n	8003510 <HAL_TIM_IC_Start_IT+0x80>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800350e:	b2db      	uxtb	r3, r3
 8003510:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003512:	7bbb      	ldrb	r3, [r7, #14]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d102      	bne.n	800351e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003518:	7b7b      	ldrb	r3, [r7, #13]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d001      	beq.n	8003522 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e0b8      	b.n	8003694 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d104      	bne.n	8003532 <HAL_TIM_IC_Start_IT+0xa2>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003530:	e013      	b.n	800355a <HAL_TIM_IC_Start_IT+0xca>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b04      	cmp	r3, #4
 8003536:	d104      	bne.n	8003542 <HAL_TIM_IC_Start_IT+0xb2>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003540:	e00b      	b.n	800355a <HAL_TIM_IC_Start_IT+0xca>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b08      	cmp	r3, #8
 8003546:	d104      	bne.n	8003552 <HAL_TIM_IC_Start_IT+0xc2>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003550:	e003      	b.n	800355a <HAL_TIM_IC_Start_IT+0xca>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2202      	movs	r2, #2
 8003556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d104      	bne.n	800356a <HAL_TIM_IC_Start_IT+0xda>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003568:	e013      	b.n	8003592 <HAL_TIM_IC_Start_IT+0x102>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b04      	cmp	r3, #4
 800356e:	d104      	bne.n	800357a <HAL_TIM_IC_Start_IT+0xea>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003578:	e00b      	b.n	8003592 <HAL_TIM_IC_Start_IT+0x102>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b08      	cmp	r3, #8
 800357e:	d104      	bne.n	800358a <HAL_TIM_IC_Start_IT+0xfa>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003588:	e003      	b.n	8003592 <HAL_TIM_IC_Start_IT+0x102>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2202      	movs	r2, #2
 800358e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b0c      	cmp	r3, #12
 8003596:	d841      	bhi.n	800361c <HAL_TIM_IC_Start_IT+0x18c>
 8003598:	a201      	add	r2, pc, #4	; (adr r2, 80035a0 <HAL_TIM_IC_Start_IT+0x110>)
 800359a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359e:	bf00      	nop
 80035a0:	080035d5 	.word	0x080035d5
 80035a4:	0800361d 	.word	0x0800361d
 80035a8:	0800361d 	.word	0x0800361d
 80035ac:	0800361d 	.word	0x0800361d
 80035b0:	080035e7 	.word	0x080035e7
 80035b4:	0800361d 	.word	0x0800361d
 80035b8:	0800361d 	.word	0x0800361d
 80035bc:	0800361d 	.word	0x0800361d
 80035c0:	080035f9 	.word	0x080035f9
 80035c4:	0800361d 	.word	0x0800361d
 80035c8:	0800361d 	.word	0x0800361d
 80035cc:	0800361d 	.word	0x0800361d
 80035d0:	0800360b 	.word	0x0800360b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0202 	orr.w	r2, r2, #2
 80035e2:	60da      	str	r2, [r3, #12]
      break;
 80035e4:	e01d      	b.n	8003622 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0204 	orr.w	r2, r2, #4
 80035f4:	60da      	str	r2, [r3, #12]
      break;
 80035f6:	e014      	b.n	8003622 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0208 	orr.w	r2, r2, #8
 8003606:	60da      	str	r2, [r3, #12]
      break;
 8003608:	e00b      	b.n	8003622 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68da      	ldr	r2, [r3, #12]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f042 0210 	orr.w	r2, r2, #16
 8003618:	60da      	str	r2, [r3, #12]
      break;
 800361a:	e002      	b.n	8003622 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
      break;
 8003620:	bf00      	nop
  }

  if (status == HAL_OK)
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d134      	bne.n	8003692 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2201      	movs	r2, #1
 800362e:	6839      	ldr	r1, [r7, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f000 fbb4 	bl	8003d9e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a18      	ldr	r2, [pc, #96]	; (800369c <HAL_TIM_IC_Start_IT+0x20c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d00e      	beq.n	800365e <HAL_TIM_IC_Start_IT+0x1ce>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003648:	d009      	beq.n	800365e <HAL_TIM_IC_Start_IT+0x1ce>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a14      	ldr	r2, [pc, #80]	; (80036a0 <HAL_TIM_IC_Start_IT+0x210>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d004      	beq.n	800365e <HAL_TIM_IC_Start_IT+0x1ce>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a12      	ldr	r2, [pc, #72]	; (80036a4 <HAL_TIM_IC_Start_IT+0x214>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d111      	bne.n	8003682 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b06      	cmp	r3, #6
 800366e:	d010      	beq.n	8003692 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0201 	orr.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003680:	e007      	b.n	8003692 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0201 	orr.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003692:	7bfb      	ldrb	r3, [r7, #15]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40012c00 	.word	0x40012c00
 80036a0:	40000400 	.word	0x40000400
 80036a4:	40000800 	.word	0x40000800

080036a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d122      	bne.n	8003704 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d11b      	bne.n	8003704 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f06f 0202 	mvn.w	r2, #2
 80036d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7fd fa1c 	bl	8000b28 <HAL_TIM_IC_CaptureCallback>
 80036f0:	e005      	b.n	80036fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f9c9 	bl	8003a8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f9cf 	bl	8003a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b04      	cmp	r3, #4
 8003710:	d122      	bne.n	8003758 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b04      	cmp	r3, #4
 800371e:	d11b      	bne.n	8003758 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0204 	mvn.w	r2, #4
 8003728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2202      	movs	r2, #2
 800372e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fd f9f2 	bl	8000b28 <HAL_TIM_IC_CaptureCallback>
 8003744:	e005      	b.n	8003752 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f99f 	bl	8003a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f9a5 	bl	8003a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b08      	cmp	r3, #8
 8003764:	d122      	bne.n	80037ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	2b08      	cmp	r3, #8
 8003772:	d11b      	bne.n	80037ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0208 	mvn.w	r2, #8
 800377c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2204      	movs	r2, #4
 8003782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fd f9c8 	bl	8000b28 <HAL_TIM_IC_CaptureCallback>
 8003798:	e005      	b.n	80037a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f975 	bl	8003a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f97b 	bl	8003a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f003 0310 	and.w	r3, r3, #16
 80037b6:	2b10      	cmp	r3, #16
 80037b8:	d122      	bne.n	8003800 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	2b10      	cmp	r3, #16
 80037c6:	d11b      	bne.n	8003800 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0210 	mvn.w	r2, #16
 80037d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2208      	movs	r2, #8
 80037d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fd f99e 	bl	8000b28 <HAL_TIM_IC_CaptureCallback>
 80037ec:	e005      	b.n	80037fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f94b 	bl	8003a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f951 	bl	8003a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b01      	cmp	r3, #1
 800380c:	d10e      	bne.n	800382c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b01      	cmp	r3, #1
 800381a:	d107      	bne.n	800382c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0201 	mvn.w	r2, #1
 8003824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f926 	bl	8003a78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003836:	2b80      	cmp	r3, #128	; 0x80
 8003838:	d10e      	bne.n	8003858 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003844:	2b80      	cmp	r3, #128	; 0x80
 8003846:	d107      	bne.n	8003858 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fb2f 	bl	8003eb6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003862:	2b40      	cmp	r3, #64	; 0x40
 8003864:	d10e      	bne.n	8003884 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003870:	2b40      	cmp	r3, #64	; 0x40
 8003872:	d107      	bne.n	8003884 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800387c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f915 	bl	8003aae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0320 	and.w	r3, r3, #32
 800388e:	2b20      	cmp	r3, #32
 8003890:	d10e      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0320 	and.w	r3, r3, #32
 800389c:	2b20      	cmp	r3, #32
 800389e:	d107      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0220 	mvn.w	r2, #32
 80038a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 fafa 	bl	8003ea4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038b0:	bf00      	nop
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e088      	b.n	80039e8 <HAL_TIM_IC_ConfigChannel+0x130>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d11b      	bne.n	800391c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80038f4:	f000 f946 	bl	8003b84 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699a      	ldr	r2, [r3, #24]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 020c 	bic.w	r2, r2, #12
 8003906:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6999      	ldr	r1, [r3, #24]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	619a      	str	r2, [r3, #24]
 800391a:	e060      	b.n	80039de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b04      	cmp	r3, #4
 8003920:	d11c      	bne.n	800395c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003932:	f000 f981 	bl	8003c38 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699a      	ldr	r2, [r3, #24]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003944:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6999      	ldr	r1, [r3, #24]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	021a      	lsls	r2, r3, #8
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	619a      	str	r2, [r3, #24]
 800395a:	e040      	b.n	80039de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b08      	cmp	r3, #8
 8003960:	d11b      	bne.n	800399a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003972:	f000 f99d 	bl	8003cb0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69da      	ldr	r2, [r3, #28]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 020c 	bic.w	r2, r2, #12
 8003984:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69d9      	ldr	r1, [r3, #28]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	61da      	str	r2, [r3, #28]
 8003998:	e021      	b.n	80039de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b0c      	cmp	r3, #12
 800399e:	d11c      	bne.n	80039da <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80039b0:	f000 f9b9 	bl	8003d26 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	69da      	ldr	r2, [r3, #28]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039c2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	69d9      	ldr	r1, [r3, #28]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	021a      	lsls	r2, r3, #8
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	61da      	str	r2, [r3, #28]
 80039d8:	e001      	b.n	80039de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b0c      	cmp	r3, #12
 8003a02:	d831      	bhi.n	8003a68 <HAL_TIM_ReadCapturedValue+0x78>
 8003a04:	a201      	add	r2, pc, #4	; (adr r2, 8003a0c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0a:	bf00      	nop
 8003a0c:	08003a41 	.word	0x08003a41
 8003a10:	08003a69 	.word	0x08003a69
 8003a14:	08003a69 	.word	0x08003a69
 8003a18:	08003a69 	.word	0x08003a69
 8003a1c:	08003a4b 	.word	0x08003a4b
 8003a20:	08003a69 	.word	0x08003a69
 8003a24:	08003a69 	.word	0x08003a69
 8003a28:	08003a69 	.word	0x08003a69
 8003a2c:	08003a55 	.word	0x08003a55
 8003a30:	08003a69 	.word	0x08003a69
 8003a34:	08003a69 	.word	0x08003a69
 8003a38:	08003a69 	.word	0x08003a69
 8003a3c:	08003a5f 	.word	0x08003a5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a46:	60fb      	str	r3, [r7, #12]

      break;
 8003a48:	e00f      	b.n	8003a6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a50:	60fb      	str	r3, [r7, #12]

      break;
 8003a52:	e00a      	b.n	8003a6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5a:	60fb      	str	r3, [r7, #12]

      break;
 8003a5c:	e005      	b.n	8003a6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a64:	60fb      	str	r3, [r7, #12]

      break;
 8003a66:	e000      	b.n	8003a6a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003a68:	bf00      	nop
  }

  return tmpreg;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop

08003a78 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bc80      	pop	{r7}
 8003a88:	4770      	bx	lr

08003a8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr

08003a9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr

08003aae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr

08003ac0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a29      	ldr	r2, [pc, #164]	; (8003b78 <TIM_Base_SetConfig+0xb8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00b      	beq.n	8003af0 <TIM_Base_SetConfig+0x30>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ade:	d007      	beq.n	8003af0 <TIM_Base_SetConfig+0x30>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a26      	ldr	r2, [pc, #152]	; (8003b7c <TIM_Base_SetConfig+0xbc>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d003      	beq.n	8003af0 <TIM_Base_SetConfig+0x30>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a25      	ldr	r2, [pc, #148]	; (8003b80 <TIM_Base_SetConfig+0xc0>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d108      	bne.n	8003b02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a1c      	ldr	r2, [pc, #112]	; (8003b78 <TIM_Base_SetConfig+0xb8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00b      	beq.n	8003b22 <TIM_Base_SetConfig+0x62>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b10:	d007      	beq.n	8003b22 <TIM_Base_SetConfig+0x62>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a19      	ldr	r2, [pc, #100]	; (8003b7c <TIM_Base_SetConfig+0xbc>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d003      	beq.n	8003b22 <TIM_Base_SetConfig+0x62>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a18      	ldr	r2, [pc, #96]	; (8003b80 <TIM_Base_SetConfig+0xc0>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d108      	bne.n	8003b34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a07      	ldr	r2, [pc, #28]	; (8003b78 <TIM_Base_SetConfig+0xb8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d103      	bne.n	8003b68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	615a      	str	r2, [r3, #20]
}
 8003b6e:	bf00      	nop
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr
 8003b78:	40012c00 	.word	0x40012c00
 8003b7c:	40000400 	.word	0x40000400
 8003b80:	40000800 	.word	0x40000800

08003b84 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	f023 0201 	bic.w	r2, r3, #1
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4a1f      	ldr	r2, [pc, #124]	; (8003c2c <TIM_TI1_SetConfig+0xa8>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d00b      	beq.n	8003bca <TIM_TI1_SetConfig+0x46>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb8:	d007      	beq.n	8003bca <TIM_TI1_SetConfig+0x46>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4a1c      	ldr	r2, [pc, #112]	; (8003c30 <TIM_TI1_SetConfig+0xac>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d003      	beq.n	8003bca <TIM_TI1_SetConfig+0x46>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4a1b      	ldr	r2, [pc, #108]	; (8003c34 <TIM_TI1_SetConfig+0xb0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d101      	bne.n	8003bce <TIM_TI1_SetConfig+0x4a>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e000      	b.n	8003bd0 <TIM_TI1_SetConfig+0x4c>
 8003bce:	2300      	movs	r3, #0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f023 0303 	bic.w	r3, r3, #3
 8003bda:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	e003      	b.n	8003bee <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f043 0301 	orr.w	r3, r3, #1
 8003bec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f023 030a 	bic.w	r3, r3, #10
 8003c08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f003 030a 	and.w	r3, r3, #10
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	621a      	str	r2, [r3, #32]
}
 8003c22:	bf00      	nop
 8003c24:	371c      	adds	r7, #28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr
 8003c2c:	40012c00 	.word	0x40012c00
 8003c30:	40000400 	.word	0x40000400
 8003c34:	40000800 	.word	0x40000800

08003c38 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f023 0210 	bic.w	r2, r3, #16
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	021b      	lsls	r3, r3, #8
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	031b      	lsls	r3, r3, #12
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c8a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	621a      	str	r2, [r3, #32]
}
 8003ca6:	bf00      	nop
 8003ca8:	371c      	adds	r7, #28
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr

08003cb0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
 8003cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	f023 0303 	bic.w	r3, r3, #3
 8003cdc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d00:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	021b      	lsls	r3, r3, #8
 8003d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	621a      	str	r2, [r3, #32]
}
 8003d1c:	bf00      	nop
 8003d1e:	371c      	adds	r7, #28
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr

08003d26 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b087      	sub	sp, #28
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	607a      	str	r2, [r7, #4]
 8003d32:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d52:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	021b      	lsls	r3, r3, #8
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d64:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	031b      	lsls	r3, r3, #12
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d78:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	031b      	lsls	r3, r3, #12
 8003d7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	621a      	str	r2, [r3, #32]
}
 8003d94:	bf00      	nop
 8003d96:	371c      	adds	r7, #28
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bc80      	pop	{r7}
 8003d9c:	4770      	bx	lr

08003d9e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b087      	sub	sp, #28
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	60f8      	str	r0, [r7, #12]
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	2201      	movs	r2, #1
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a1a      	ldr	r2, [r3, #32]
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	401a      	ands	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a1a      	ldr	r2, [r3, #32]
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f003 031f 	and.w	r3, r3, #31
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	621a      	str	r2, [r3, #32]
}
 8003ddc:	bf00      	nop
 8003dde:	371c      	adds	r7, #28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bc80      	pop	{r7}
 8003de4:	4770      	bx	lr
	...

08003de8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e046      	b.n	8003e8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a16      	ldr	r2, [pc, #88]	; (8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00e      	beq.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e4c:	d009      	beq.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a12      	ldr	r2, [pc, #72]	; (8003e9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d004      	beq.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a10      	ldr	r2, [pc, #64]	; (8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d10c      	bne.n	8003e7c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr
 8003e98:	40012c00 	.word	0x40012c00
 8003e9c:	40000400 	.word	0x40000400
 8003ea0:	40000800 	.word	0x40000800

08003ea4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr

08003eb6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e042      	b.n	8003f60 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7fd f996 	bl	8001220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2224      	movs	r2, #36	; 0x24
 8003ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f91d 	bl	800414c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695a      	ldr	r2, [r3, #20]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08a      	sub	sp, #40	; 0x28
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	603b      	str	r3, [r7, #0]
 8003f74:	4613      	mov	r3, r2
 8003f76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	d16d      	bne.n	8004064 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <HAL_UART_Transmit+0x2c>
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e066      	b.n	8004066 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2221      	movs	r2, #33	; 0x21
 8003fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fa6:	f7fd fa7d 	bl	80014a4 <HAL_GetTick>
 8003faa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	88fa      	ldrh	r2, [r7, #6]
 8003fb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	88fa      	ldrh	r2, [r7, #6]
 8003fb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc0:	d108      	bne.n	8003fd4 <HAL_UART_Transmit+0x6c>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d104      	bne.n	8003fd4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	61bb      	str	r3, [r7, #24]
 8003fd2:	e003      	b.n	8003fdc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fdc:	e02a      	b.n	8004034 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	2180      	movs	r1, #128	; 0x80
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 f840 	bl	800406e <UART_WaitOnFlagUntilTimeout>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e036      	b.n	8004066 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10b      	bne.n	8004016 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800400c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	3302      	adds	r3, #2
 8004012:	61bb      	str	r3, [r7, #24]
 8004014:	e007      	b.n	8004026 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	781a      	ldrb	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	3301      	adds	r3, #1
 8004024:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800402a:	b29b      	uxth	r3, r3
 800402c:	3b01      	subs	r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1cf      	bne.n	8003fde <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2200      	movs	r2, #0
 8004046:	2140      	movs	r1, #64	; 0x40
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 f810 	bl	800406e <UART_WaitOnFlagUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e006      	b.n	8004066 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004060:	2300      	movs	r3, #0
 8004062:	e000      	b.n	8004066 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004064:	2302      	movs	r3, #2
  }
}
 8004066:	4618      	mov	r0, r3
 8004068:	3720      	adds	r7, #32
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b090      	sub	sp, #64	; 0x40
 8004072:	af00      	add	r7, sp, #0
 8004074:	60f8      	str	r0, [r7, #12]
 8004076:	60b9      	str	r1, [r7, #8]
 8004078:	603b      	str	r3, [r7, #0]
 800407a:	4613      	mov	r3, r2
 800407c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800407e:	e050      	b.n	8004122 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004086:	d04c      	beq.n	8004122 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800408a:	2b00      	cmp	r3, #0
 800408c:	d007      	beq.n	800409e <UART_WaitOnFlagUntilTimeout+0x30>
 800408e:	f7fd fa09 	bl	80014a4 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800409a:	429a      	cmp	r2, r3
 800409c:	d241      	bcs.n	8004122 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	330c      	adds	r3, #12
 80040a4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a8:	e853 3f00 	ldrex	r3, [r3]
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	330c      	adds	r3, #12
 80040bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040be:	637a      	str	r2, [r7, #52]	; 0x34
 80040c0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040c6:	e841 2300 	strex	r3, r2, [r1]
 80040ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1e5      	bne.n	800409e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3314      	adds	r3, #20
 80040d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	e853 3f00 	ldrex	r3, [r3]
 80040e0:	613b      	str	r3, [r7, #16]
   return(result);
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	f023 0301 	bic.w	r3, r3, #1
 80040e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3314      	adds	r3, #20
 80040f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040f2:	623a      	str	r2, [r7, #32]
 80040f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f6:	69f9      	ldr	r1, [r7, #28]
 80040f8:	6a3a      	ldr	r2, [r7, #32]
 80040fa:	e841 2300 	strex	r3, r2, [r1]
 80040fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1e5      	bne.n	80040d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2220      	movs	r2, #32
 8004112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e00f      	b.n	8004142 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4013      	ands	r3, r2
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	429a      	cmp	r2, r3
 8004130:	bf0c      	ite	eq
 8004132:	2301      	moveq	r3, #1
 8004134:	2300      	movne	r3, #0
 8004136:	b2db      	uxtb	r3, r3
 8004138:	461a      	mov	r2, r3
 800413a:	79fb      	ldrb	r3, [r7, #7]
 800413c:	429a      	cmp	r2, r3
 800413e:	d09f      	beq.n	8004080 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3740      	adds	r7, #64	; 0x40
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	4313      	orrs	r3, r2
 800417a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004186:	f023 030c 	bic.w	r3, r3, #12
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6812      	ldr	r2, [r2, #0]
 800418e:	68b9      	ldr	r1, [r7, #8]
 8004190:	430b      	orrs	r3, r1
 8004192:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699a      	ldr	r2, [r3, #24]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a2c      	ldr	r2, [pc, #176]	; (8004260 <UART_SetConfig+0x114>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d103      	bne.n	80041bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80041b4:	f7fe f838 	bl	8002228 <HAL_RCC_GetPCLK2Freq>
 80041b8:	60f8      	str	r0, [r7, #12]
 80041ba:	e002      	b.n	80041c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80041bc:	f7fe f820 	bl	8002200 <HAL_RCC_GetPCLK1Freq>
 80041c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4613      	mov	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	009a      	lsls	r2, r3, #2
 80041cc:	441a      	add	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d8:	4a22      	ldr	r2, [pc, #136]	; (8004264 <UART_SetConfig+0x118>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	0119      	lsls	r1, r3, #4
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	4613      	mov	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	009a      	lsls	r2, r3, #2
 80041ec:	441a      	add	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041f8:	4b1a      	ldr	r3, [pc, #104]	; (8004264 <UART_SetConfig+0x118>)
 80041fa:	fba3 0302 	umull	r0, r3, r3, r2
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	2064      	movs	r0, #100	; 0x64
 8004202:	fb00 f303 	mul.w	r3, r0, r3
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	3332      	adds	r3, #50	; 0x32
 800420c:	4a15      	ldr	r2, [pc, #84]	; (8004264 <UART_SetConfig+0x118>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004218:	4419      	add	r1, r3
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	4613      	mov	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	009a      	lsls	r2, r3, #2
 8004224:	441a      	add	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004230:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <UART_SetConfig+0x118>)
 8004232:	fba3 0302 	umull	r0, r3, r3, r2
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	2064      	movs	r0, #100	; 0x64
 800423a:	fb00 f303 	mul.w	r3, r0, r3
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	3332      	adds	r3, #50	; 0x32
 8004244:	4a07      	ldr	r2, [pc, #28]	; (8004264 <UART_SetConfig+0x118>)
 8004246:	fba2 2303 	umull	r2, r3, r2, r3
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	f003 020f 	and.w	r2, r3, #15
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	440a      	add	r2, r1
 8004256:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004258:	bf00      	nop
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40013800 	.word	0x40013800
 8004264:	51eb851f 	.word	0x51eb851f

08004268 <siprintf>:
 8004268:	b40e      	push	{r1, r2, r3}
 800426a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800426e:	b500      	push	{lr}
 8004270:	b09c      	sub	sp, #112	; 0x70
 8004272:	ab1d      	add	r3, sp, #116	; 0x74
 8004274:	9002      	str	r0, [sp, #8]
 8004276:	9006      	str	r0, [sp, #24]
 8004278:	9107      	str	r1, [sp, #28]
 800427a:	9104      	str	r1, [sp, #16]
 800427c:	4808      	ldr	r0, [pc, #32]	; (80042a0 <siprintf+0x38>)
 800427e:	4909      	ldr	r1, [pc, #36]	; (80042a4 <siprintf+0x3c>)
 8004280:	f853 2b04 	ldr.w	r2, [r3], #4
 8004284:	9105      	str	r1, [sp, #20]
 8004286:	6800      	ldr	r0, [r0, #0]
 8004288:	a902      	add	r1, sp, #8
 800428a:	9301      	str	r3, [sp, #4]
 800428c:	f000 f98e 	bl	80045ac <_svfiprintf_r>
 8004290:	2200      	movs	r2, #0
 8004292:	9b02      	ldr	r3, [sp, #8]
 8004294:	701a      	strb	r2, [r3, #0]
 8004296:	b01c      	add	sp, #112	; 0x70
 8004298:	f85d eb04 	ldr.w	lr, [sp], #4
 800429c:	b003      	add	sp, #12
 800429e:	4770      	bx	lr
 80042a0:	20000058 	.word	0x20000058
 80042a4:	ffff0208 	.word	0xffff0208

080042a8 <memset>:
 80042a8:	4603      	mov	r3, r0
 80042aa:	4402      	add	r2, r0
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d100      	bne.n	80042b2 <memset+0xa>
 80042b0:	4770      	bx	lr
 80042b2:	f803 1b01 	strb.w	r1, [r3], #1
 80042b6:	e7f9      	b.n	80042ac <memset+0x4>

080042b8 <__errno>:
 80042b8:	4b01      	ldr	r3, [pc, #4]	; (80042c0 <__errno+0x8>)
 80042ba:	6818      	ldr	r0, [r3, #0]
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	20000058 	.word	0x20000058

080042c4 <__libc_init_array>:
 80042c4:	b570      	push	{r4, r5, r6, lr}
 80042c6:	2600      	movs	r6, #0
 80042c8:	4d0c      	ldr	r5, [pc, #48]	; (80042fc <__libc_init_array+0x38>)
 80042ca:	4c0d      	ldr	r4, [pc, #52]	; (8004300 <__libc_init_array+0x3c>)
 80042cc:	1b64      	subs	r4, r4, r5
 80042ce:	10a4      	asrs	r4, r4, #2
 80042d0:	42a6      	cmp	r6, r4
 80042d2:	d109      	bne.n	80042e8 <__libc_init_array+0x24>
 80042d4:	f000 fc7a 	bl	8004bcc <_init>
 80042d8:	2600      	movs	r6, #0
 80042da:	4d0a      	ldr	r5, [pc, #40]	; (8004304 <__libc_init_array+0x40>)
 80042dc:	4c0a      	ldr	r4, [pc, #40]	; (8004308 <__libc_init_array+0x44>)
 80042de:	1b64      	subs	r4, r4, r5
 80042e0:	10a4      	asrs	r4, r4, #2
 80042e2:	42a6      	cmp	r6, r4
 80042e4:	d105      	bne.n	80042f2 <__libc_init_array+0x2e>
 80042e6:	bd70      	pop	{r4, r5, r6, pc}
 80042e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ec:	4798      	blx	r3
 80042ee:	3601      	adds	r6, #1
 80042f0:	e7ee      	b.n	80042d0 <__libc_init_array+0xc>
 80042f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042f6:	4798      	blx	r3
 80042f8:	3601      	adds	r6, #1
 80042fa:	e7f2      	b.n	80042e2 <__libc_init_array+0x1e>
 80042fc:	08004c6c 	.word	0x08004c6c
 8004300:	08004c6c 	.word	0x08004c6c
 8004304:	08004c6c 	.word	0x08004c6c
 8004308:	08004c70 	.word	0x08004c70

0800430c <__retarget_lock_acquire_recursive>:
 800430c:	4770      	bx	lr

0800430e <__retarget_lock_release_recursive>:
 800430e:	4770      	bx	lr

08004310 <_free_r>:
 8004310:	b538      	push	{r3, r4, r5, lr}
 8004312:	4605      	mov	r5, r0
 8004314:	2900      	cmp	r1, #0
 8004316:	d040      	beq.n	800439a <_free_r+0x8a>
 8004318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800431c:	1f0c      	subs	r4, r1, #4
 800431e:	2b00      	cmp	r3, #0
 8004320:	bfb8      	it	lt
 8004322:	18e4      	addlt	r4, r4, r3
 8004324:	f000 f8dc 	bl	80044e0 <__malloc_lock>
 8004328:	4a1c      	ldr	r2, [pc, #112]	; (800439c <_free_r+0x8c>)
 800432a:	6813      	ldr	r3, [r2, #0]
 800432c:	b933      	cbnz	r3, 800433c <_free_r+0x2c>
 800432e:	6063      	str	r3, [r4, #4]
 8004330:	6014      	str	r4, [r2, #0]
 8004332:	4628      	mov	r0, r5
 8004334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004338:	f000 b8d8 	b.w	80044ec <__malloc_unlock>
 800433c:	42a3      	cmp	r3, r4
 800433e:	d908      	bls.n	8004352 <_free_r+0x42>
 8004340:	6820      	ldr	r0, [r4, #0]
 8004342:	1821      	adds	r1, r4, r0
 8004344:	428b      	cmp	r3, r1
 8004346:	bf01      	itttt	eq
 8004348:	6819      	ldreq	r1, [r3, #0]
 800434a:	685b      	ldreq	r3, [r3, #4]
 800434c:	1809      	addeq	r1, r1, r0
 800434e:	6021      	streq	r1, [r4, #0]
 8004350:	e7ed      	b.n	800432e <_free_r+0x1e>
 8004352:	461a      	mov	r2, r3
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	b10b      	cbz	r3, 800435c <_free_r+0x4c>
 8004358:	42a3      	cmp	r3, r4
 800435a:	d9fa      	bls.n	8004352 <_free_r+0x42>
 800435c:	6811      	ldr	r1, [r2, #0]
 800435e:	1850      	adds	r0, r2, r1
 8004360:	42a0      	cmp	r0, r4
 8004362:	d10b      	bne.n	800437c <_free_r+0x6c>
 8004364:	6820      	ldr	r0, [r4, #0]
 8004366:	4401      	add	r1, r0
 8004368:	1850      	adds	r0, r2, r1
 800436a:	4283      	cmp	r3, r0
 800436c:	6011      	str	r1, [r2, #0]
 800436e:	d1e0      	bne.n	8004332 <_free_r+0x22>
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	4408      	add	r0, r1
 8004376:	6010      	str	r0, [r2, #0]
 8004378:	6053      	str	r3, [r2, #4]
 800437a:	e7da      	b.n	8004332 <_free_r+0x22>
 800437c:	d902      	bls.n	8004384 <_free_r+0x74>
 800437e:	230c      	movs	r3, #12
 8004380:	602b      	str	r3, [r5, #0]
 8004382:	e7d6      	b.n	8004332 <_free_r+0x22>
 8004384:	6820      	ldr	r0, [r4, #0]
 8004386:	1821      	adds	r1, r4, r0
 8004388:	428b      	cmp	r3, r1
 800438a:	bf01      	itttt	eq
 800438c:	6819      	ldreq	r1, [r3, #0]
 800438e:	685b      	ldreq	r3, [r3, #4]
 8004390:	1809      	addeq	r1, r1, r0
 8004392:	6021      	streq	r1, [r4, #0]
 8004394:	6063      	str	r3, [r4, #4]
 8004396:	6054      	str	r4, [r2, #4]
 8004398:	e7cb      	b.n	8004332 <_free_r+0x22>
 800439a:	bd38      	pop	{r3, r4, r5, pc}
 800439c:	200002a0 	.word	0x200002a0

080043a0 <sbrk_aligned>:
 80043a0:	b570      	push	{r4, r5, r6, lr}
 80043a2:	4e0e      	ldr	r6, [pc, #56]	; (80043dc <sbrk_aligned+0x3c>)
 80043a4:	460c      	mov	r4, r1
 80043a6:	6831      	ldr	r1, [r6, #0]
 80043a8:	4605      	mov	r5, r0
 80043aa:	b911      	cbnz	r1, 80043b2 <sbrk_aligned+0x12>
 80043ac:	f000 fbaa 	bl	8004b04 <_sbrk_r>
 80043b0:	6030      	str	r0, [r6, #0]
 80043b2:	4621      	mov	r1, r4
 80043b4:	4628      	mov	r0, r5
 80043b6:	f000 fba5 	bl	8004b04 <_sbrk_r>
 80043ba:	1c43      	adds	r3, r0, #1
 80043bc:	d00a      	beq.n	80043d4 <sbrk_aligned+0x34>
 80043be:	1cc4      	adds	r4, r0, #3
 80043c0:	f024 0403 	bic.w	r4, r4, #3
 80043c4:	42a0      	cmp	r0, r4
 80043c6:	d007      	beq.n	80043d8 <sbrk_aligned+0x38>
 80043c8:	1a21      	subs	r1, r4, r0
 80043ca:	4628      	mov	r0, r5
 80043cc:	f000 fb9a 	bl	8004b04 <_sbrk_r>
 80043d0:	3001      	adds	r0, #1
 80043d2:	d101      	bne.n	80043d8 <sbrk_aligned+0x38>
 80043d4:	f04f 34ff 	mov.w	r4, #4294967295
 80043d8:	4620      	mov	r0, r4
 80043da:	bd70      	pop	{r4, r5, r6, pc}
 80043dc:	200002a4 	.word	0x200002a4

080043e0 <_malloc_r>:
 80043e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043e4:	1ccd      	adds	r5, r1, #3
 80043e6:	f025 0503 	bic.w	r5, r5, #3
 80043ea:	3508      	adds	r5, #8
 80043ec:	2d0c      	cmp	r5, #12
 80043ee:	bf38      	it	cc
 80043f0:	250c      	movcc	r5, #12
 80043f2:	2d00      	cmp	r5, #0
 80043f4:	4607      	mov	r7, r0
 80043f6:	db01      	blt.n	80043fc <_malloc_r+0x1c>
 80043f8:	42a9      	cmp	r1, r5
 80043fa:	d905      	bls.n	8004408 <_malloc_r+0x28>
 80043fc:	230c      	movs	r3, #12
 80043fe:	2600      	movs	r6, #0
 8004400:	603b      	str	r3, [r7, #0]
 8004402:	4630      	mov	r0, r6
 8004404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004408:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80044dc <_malloc_r+0xfc>
 800440c:	f000 f868 	bl	80044e0 <__malloc_lock>
 8004410:	f8d8 3000 	ldr.w	r3, [r8]
 8004414:	461c      	mov	r4, r3
 8004416:	bb5c      	cbnz	r4, 8004470 <_malloc_r+0x90>
 8004418:	4629      	mov	r1, r5
 800441a:	4638      	mov	r0, r7
 800441c:	f7ff ffc0 	bl	80043a0 <sbrk_aligned>
 8004420:	1c43      	adds	r3, r0, #1
 8004422:	4604      	mov	r4, r0
 8004424:	d155      	bne.n	80044d2 <_malloc_r+0xf2>
 8004426:	f8d8 4000 	ldr.w	r4, [r8]
 800442a:	4626      	mov	r6, r4
 800442c:	2e00      	cmp	r6, #0
 800442e:	d145      	bne.n	80044bc <_malloc_r+0xdc>
 8004430:	2c00      	cmp	r4, #0
 8004432:	d048      	beq.n	80044c6 <_malloc_r+0xe6>
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	4631      	mov	r1, r6
 8004438:	4638      	mov	r0, r7
 800443a:	eb04 0903 	add.w	r9, r4, r3
 800443e:	f000 fb61 	bl	8004b04 <_sbrk_r>
 8004442:	4581      	cmp	r9, r0
 8004444:	d13f      	bne.n	80044c6 <_malloc_r+0xe6>
 8004446:	6821      	ldr	r1, [r4, #0]
 8004448:	4638      	mov	r0, r7
 800444a:	1a6d      	subs	r5, r5, r1
 800444c:	4629      	mov	r1, r5
 800444e:	f7ff ffa7 	bl	80043a0 <sbrk_aligned>
 8004452:	3001      	adds	r0, #1
 8004454:	d037      	beq.n	80044c6 <_malloc_r+0xe6>
 8004456:	6823      	ldr	r3, [r4, #0]
 8004458:	442b      	add	r3, r5
 800445a:	6023      	str	r3, [r4, #0]
 800445c:	f8d8 3000 	ldr.w	r3, [r8]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d038      	beq.n	80044d6 <_malloc_r+0xf6>
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	42a2      	cmp	r2, r4
 8004468:	d12b      	bne.n	80044c2 <_malloc_r+0xe2>
 800446a:	2200      	movs	r2, #0
 800446c:	605a      	str	r2, [r3, #4]
 800446e:	e00f      	b.n	8004490 <_malloc_r+0xb0>
 8004470:	6822      	ldr	r2, [r4, #0]
 8004472:	1b52      	subs	r2, r2, r5
 8004474:	d41f      	bmi.n	80044b6 <_malloc_r+0xd6>
 8004476:	2a0b      	cmp	r2, #11
 8004478:	d917      	bls.n	80044aa <_malloc_r+0xca>
 800447a:	1961      	adds	r1, r4, r5
 800447c:	42a3      	cmp	r3, r4
 800447e:	6025      	str	r5, [r4, #0]
 8004480:	bf18      	it	ne
 8004482:	6059      	strne	r1, [r3, #4]
 8004484:	6863      	ldr	r3, [r4, #4]
 8004486:	bf08      	it	eq
 8004488:	f8c8 1000 	streq.w	r1, [r8]
 800448c:	5162      	str	r2, [r4, r5]
 800448e:	604b      	str	r3, [r1, #4]
 8004490:	4638      	mov	r0, r7
 8004492:	f104 060b 	add.w	r6, r4, #11
 8004496:	f000 f829 	bl	80044ec <__malloc_unlock>
 800449a:	f026 0607 	bic.w	r6, r6, #7
 800449e:	1d23      	adds	r3, r4, #4
 80044a0:	1af2      	subs	r2, r6, r3
 80044a2:	d0ae      	beq.n	8004402 <_malloc_r+0x22>
 80044a4:	1b9b      	subs	r3, r3, r6
 80044a6:	50a3      	str	r3, [r4, r2]
 80044a8:	e7ab      	b.n	8004402 <_malloc_r+0x22>
 80044aa:	42a3      	cmp	r3, r4
 80044ac:	6862      	ldr	r2, [r4, #4]
 80044ae:	d1dd      	bne.n	800446c <_malloc_r+0x8c>
 80044b0:	f8c8 2000 	str.w	r2, [r8]
 80044b4:	e7ec      	b.n	8004490 <_malloc_r+0xb0>
 80044b6:	4623      	mov	r3, r4
 80044b8:	6864      	ldr	r4, [r4, #4]
 80044ba:	e7ac      	b.n	8004416 <_malloc_r+0x36>
 80044bc:	4634      	mov	r4, r6
 80044be:	6876      	ldr	r6, [r6, #4]
 80044c0:	e7b4      	b.n	800442c <_malloc_r+0x4c>
 80044c2:	4613      	mov	r3, r2
 80044c4:	e7cc      	b.n	8004460 <_malloc_r+0x80>
 80044c6:	230c      	movs	r3, #12
 80044c8:	4638      	mov	r0, r7
 80044ca:	603b      	str	r3, [r7, #0]
 80044cc:	f000 f80e 	bl	80044ec <__malloc_unlock>
 80044d0:	e797      	b.n	8004402 <_malloc_r+0x22>
 80044d2:	6025      	str	r5, [r4, #0]
 80044d4:	e7dc      	b.n	8004490 <_malloc_r+0xb0>
 80044d6:	605b      	str	r3, [r3, #4]
 80044d8:	deff      	udf	#255	; 0xff
 80044da:	bf00      	nop
 80044dc:	200002a0 	.word	0x200002a0

080044e0 <__malloc_lock>:
 80044e0:	4801      	ldr	r0, [pc, #4]	; (80044e8 <__malloc_lock+0x8>)
 80044e2:	f7ff bf13 	b.w	800430c <__retarget_lock_acquire_recursive>
 80044e6:	bf00      	nop
 80044e8:	2000029c 	.word	0x2000029c

080044ec <__malloc_unlock>:
 80044ec:	4801      	ldr	r0, [pc, #4]	; (80044f4 <__malloc_unlock+0x8>)
 80044ee:	f7ff bf0e 	b.w	800430e <__retarget_lock_release_recursive>
 80044f2:	bf00      	nop
 80044f4:	2000029c 	.word	0x2000029c

080044f8 <__ssputs_r>:
 80044f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044fc:	461f      	mov	r7, r3
 80044fe:	688e      	ldr	r6, [r1, #8]
 8004500:	4682      	mov	sl, r0
 8004502:	42be      	cmp	r6, r7
 8004504:	460c      	mov	r4, r1
 8004506:	4690      	mov	r8, r2
 8004508:	680b      	ldr	r3, [r1, #0]
 800450a:	d82c      	bhi.n	8004566 <__ssputs_r+0x6e>
 800450c:	898a      	ldrh	r2, [r1, #12]
 800450e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004512:	d026      	beq.n	8004562 <__ssputs_r+0x6a>
 8004514:	6965      	ldr	r5, [r4, #20]
 8004516:	6909      	ldr	r1, [r1, #16]
 8004518:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800451c:	eba3 0901 	sub.w	r9, r3, r1
 8004520:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004524:	1c7b      	adds	r3, r7, #1
 8004526:	444b      	add	r3, r9
 8004528:	106d      	asrs	r5, r5, #1
 800452a:	429d      	cmp	r5, r3
 800452c:	bf38      	it	cc
 800452e:	461d      	movcc	r5, r3
 8004530:	0553      	lsls	r3, r2, #21
 8004532:	d527      	bpl.n	8004584 <__ssputs_r+0x8c>
 8004534:	4629      	mov	r1, r5
 8004536:	f7ff ff53 	bl	80043e0 <_malloc_r>
 800453a:	4606      	mov	r6, r0
 800453c:	b360      	cbz	r0, 8004598 <__ssputs_r+0xa0>
 800453e:	464a      	mov	r2, r9
 8004540:	6921      	ldr	r1, [r4, #16]
 8004542:	f000 fafd 	bl	8004b40 <memcpy>
 8004546:	89a3      	ldrh	r3, [r4, #12]
 8004548:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800454c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004550:	81a3      	strh	r3, [r4, #12]
 8004552:	6126      	str	r6, [r4, #16]
 8004554:	444e      	add	r6, r9
 8004556:	6026      	str	r6, [r4, #0]
 8004558:	463e      	mov	r6, r7
 800455a:	6165      	str	r5, [r4, #20]
 800455c:	eba5 0509 	sub.w	r5, r5, r9
 8004560:	60a5      	str	r5, [r4, #8]
 8004562:	42be      	cmp	r6, r7
 8004564:	d900      	bls.n	8004568 <__ssputs_r+0x70>
 8004566:	463e      	mov	r6, r7
 8004568:	4632      	mov	r2, r6
 800456a:	4641      	mov	r1, r8
 800456c:	6820      	ldr	r0, [r4, #0]
 800456e:	f000 faaf 	bl	8004ad0 <memmove>
 8004572:	2000      	movs	r0, #0
 8004574:	68a3      	ldr	r3, [r4, #8]
 8004576:	1b9b      	subs	r3, r3, r6
 8004578:	60a3      	str	r3, [r4, #8]
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	4433      	add	r3, r6
 800457e:	6023      	str	r3, [r4, #0]
 8004580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004584:	462a      	mov	r2, r5
 8004586:	f000 fae9 	bl	8004b5c <_realloc_r>
 800458a:	4606      	mov	r6, r0
 800458c:	2800      	cmp	r0, #0
 800458e:	d1e0      	bne.n	8004552 <__ssputs_r+0x5a>
 8004590:	4650      	mov	r0, sl
 8004592:	6921      	ldr	r1, [r4, #16]
 8004594:	f7ff febc 	bl	8004310 <_free_r>
 8004598:	230c      	movs	r3, #12
 800459a:	f8ca 3000 	str.w	r3, [sl]
 800459e:	89a3      	ldrh	r3, [r4, #12]
 80045a0:	f04f 30ff 	mov.w	r0, #4294967295
 80045a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045a8:	81a3      	strh	r3, [r4, #12]
 80045aa:	e7e9      	b.n	8004580 <__ssputs_r+0x88>

080045ac <_svfiprintf_r>:
 80045ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045b0:	4698      	mov	r8, r3
 80045b2:	898b      	ldrh	r3, [r1, #12]
 80045b4:	4607      	mov	r7, r0
 80045b6:	061b      	lsls	r3, r3, #24
 80045b8:	460d      	mov	r5, r1
 80045ba:	4614      	mov	r4, r2
 80045bc:	b09d      	sub	sp, #116	; 0x74
 80045be:	d50e      	bpl.n	80045de <_svfiprintf_r+0x32>
 80045c0:	690b      	ldr	r3, [r1, #16]
 80045c2:	b963      	cbnz	r3, 80045de <_svfiprintf_r+0x32>
 80045c4:	2140      	movs	r1, #64	; 0x40
 80045c6:	f7ff ff0b 	bl	80043e0 <_malloc_r>
 80045ca:	6028      	str	r0, [r5, #0]
 80045cc:	6128      	str	r0, [r5, #16]
 80045ce:	b920      	cbnz	r0, 80045da <_svfiprintf_r+0x2e>
 80045d0:	230c      	movs	r3, #12
 80045d2:	603b      	str	r3, [r7, #0]
 80045d4:	f04f 30ff 	mov.w	r0, #4294967295
 80045d8:	e0d0      	b.n	800477c <_svfiprintf_r+0x1d0>
 80045da:	2340      	movs	r3, #64	; 0x40
 80045dc:	616b      	str	r3, [r5, #20]
 80045de:	2300      	movs	r3, #0
 80045e0:	9309      	str	r3, [sp, #36]	; 0x24
 80045e2:	2320      	movs	r3, #32
 80045e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045e8:	2330      	movs	r3, #48	; 0x30
 80045ea:	f04f 0901 	mov.w	r9, #1
 80045ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80045f2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004794 <_svfiprintf_r+0x1e8>
 80045f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045fa:	4623      	mov	r3, r4
 80045fc:	469a      	mov	sl, r3
 80045fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004602:	b10a      	cbz	r2, 8004608 <_svfiprintf_r+0x5c>
 8004604:	2a25      	cmp	r2, #37	; 0x25
 8004606:	d1f9      	bne.n	80045fc <_svfiprintf_r+0x50>
 8004608:	ebba 0b04 	subs.w	fp, sl, r4
 800460c:	d00b      	beq.n	8004626 <_svfiprintf_r+0x7a>
 800460e:	465b      	mov	r3, fp
 8004610:	4622      	mov	r2, r4
 8004612:	4629      	mov	r1, r5
 8004614:	4638      	mov	r0, r7
 8004616:	f7ff ff6f 	bl	80044f8 <__ssputs_r>
 800461a:	3001      	adds	r0, #1
 800461c:	f000 80a9 	beq.w	8004772 <_svfiprintf_r+0x1c6>
 8004620:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004622:	445a      	add	r2, fp
 8004624:	9209      	str	r2, [sp, #36]	; 0x24
 8004626:	f89a 3000 	ldrb.w	r3, [sl]
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 80a1 	beq.w	8004772 <_svfiprintf_r+0x1c6>
 8004630:	2300      	movs	r3, #0
 8004632:	f04f 32ff 	mov.w	r2, #4294967295
 8004636:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800463a:	f10a 0a01 	add.w	sl, sl, #1
 800463e:	9304      	str	r3, [sp, #16]
 8004640:	9307      	str	r3, [sp, #28]
 8004642:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004646:	931a      	str	r3, [sp, #104]	; 0x68
 8004648:	4654      	mov	r4, sl
 800464a:	2205      	movs	r2, #5
 800464c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004650:	4850      	ldr	r0, [pc, #320]	; (8004794 <_svfiprintf_r+0x1e8>)
 8004652:	f000 fa67 	bl	8004b24 <memchr>
 8004656:	9a04      	ldr	r2, [sp, #16]
 8004658:	b9d8      	cbnz	r0, 8004692 <_svfiprintf_r+0xe6>
 800465a:	06d0      	lsls	r0, r2, #27
 800465c:	bf44      	itt	mi
 800465e:	2320      	movmi	r3, #32
 8004660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004664:	0711      	lsls	r1, r2, #28
 8004666:	bf44      	itt	mi
 8004668:	232b      	movmi	r3, #43	; 0x2b
 800466a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800466e:	f89a 3000 	ldrb.w	r3, [sl]
 8004672:	2b2a      	cmp	r3, #42	; 0x2a
 8004674:	d015      	beq.n	80046a2 <_svfiprintf_r+0xf6>
 8004676:	4654      	mov	r4, sl
 8004678:	2000      	movs	r0, #0
 800467a:	f04f 0c0a 	mov.w	ip, #10
 800467e:	9a07      	ldr	r2, [sp, #28]
 8004680:	4621      	mov	r1, r4
 8004682:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004686:	3b30      	subs	r3, #48	; 0x30
 8004688:	2b09      	cmp	r3, #9
 800468a:	d94d      	bls.n	8004728 <_svfiprintf_r+0x17c>
 800468c:	b1b0      	cbz	r0, 80046bc <_svfiprintf_r+0x110>
 800468e:	9207      	str	r2, [sp, #28]
 8004690:	e014      	b.n	80046bc <_svfiprintf_r+0x110>
 8004692:	eba0 0308 	sub.w	r3, r0, r8
 8004696:	fa09 f303 	lsl.w	r3, r9, r3
 800469a:	4313      	orrs	r3, r2
 800469c:	46a2      	mov	sl, r4
 800469e:	9304      	str	r3, [sp, #16]
 80046a0:	e7d2      	b.n	8004648 <_svfiprintf_r+0x9c>
 80046a2:	9b03      	ldr	r3, [sp, #12]
 80046a4:	1d19      	adds	r1, r3, #4
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	9103      	str	r1, [sp, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	bfbb      	ittet	lt
 80046ae:	425b      	neglt	r3, r3
 80046b0:	f042 0202 	orrlt.w	r2, r2, #2
 80046b4:	9307      	strge	r3, [sp, #28]
 80046b6:	9307      	strlt	r3, [sp, #28]
 80046b8:	bfb8      	it	lt
 80046ba:	9204      	strlt	r2, [sp, #16]
 80046bc:	7823      	ldrb	r3, [r4, #0]
 80046be:	2b2e      	cmp	r3, #46	; 0x2e
 80046c0:	d10c      	bne.n	80046dc <_svfiprintf_r+0x130>
 80046c2:	7863      	ldrb	r3, [r4, #1]
 80046c4:	2b2a      	cmp	r3, #42	; 0x2a
 80046c6:	d134      	bne.n	8004732 <_svfiprintf_r+0x186>
 80046c8:	9b03      	ldr	r3, [sp, #12]
 80046ca:	3402      	adds	r4, #2
 80046cc:	1d1a      	adds	r2, r3, #4
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	9203      	str	r2, [sp, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	bfb8      	it	lt
 80046d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80046da:	9305      	str	r3, [sp, #20]
 80046dc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004798 <_svfiprintf_r+0x1ec>
 80046e0:	2203      	movs	r2, #3
 80046e2:	4650      	mov	r0, sl
 80046e4:	7821      	ldrb	r1, [r4, #0]
 80046e6:	f000 fa1d 	bl	8004b24 <memchr>
 80046ea:	b138      	cbz	r0, 80046fc <_svfiprintf_r+0x150>
 80046ec:	2240      	movs	r2, #64	; 0x40
 80046ee:	9b04      	ldr	r3, [sp, #16]
 80046f0:	eba0 000a 	sub.w	r0, r0, sl
 80046f4:	4082      	lsls	r2, r0
 80046f6:	4313      	orrs	r3, r2
 80046f8:	3401      	adds	r4, #1
 80046fa:	9304      	str	r3, [sp, #16]
 80046fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004700:	2206      	movs	r2, #6
 8004702:	4826      	ldr	r0, [pc, #152]	; (800479c <_svfiprintf_r+0x1f0>)
 8004704:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004708:	f000 fa0c 	bl	8004b24 <memchr>
 800470c:	2800      	cmp	r0, #0
 800470e:	d038      	beq.n	8004782 <_svfiprintf_r+0x1d6>
 8004710:	4b23      	ldr	r3, [pc, #140]	; (80047a0 <_svfiprintf_r+0x1f4>)
 8004712:	bb1b      	cbnz	r3, 800475c <_svfiprintf_r+0x1b0>
 8004714:	9b03      	ldr	r3, [sp, #12]
 8004716:	3307      	adds	r3, #7
 8004718:	f023 0307 	bic.w	r3, r3, #7
 800471c:	3308      	adds	r3, #8
 800471e:	9303      	str	r3, [sp, #12]
 8004720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004722:	4433      	add	r3, r6
 8004724:	9309      	str	r3, [sp, #36]	; 0x24
 8004726:	e768      	b.n	80045fa <_svfiprintf_r+0x4e>
 8004728:	460c      	mov	r4, r1
 800472a:	2001      	movs	r0, #1
 800472c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004730:	e7a6      	b.n	8004680 <_svfiprintf_r+0xd4>
 8004732:	2300      	movs	r3, #0
 8004734:	f04f 0c0a 	mov.w	ip, #10
 8004738:	4619      	mov	r1, r3
 800473a:	3401      	adds	r4, #1
 800473c:	9305      	str	r3, [sp, #20]
 800473e:	4620      	mov	r0, r4
 8004740:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004744:	3a30      	subs	r2, #48	; 0x30
 8004746:	2a09      	cmp	r2, #9
 8004748:	d903      	bls.n	8004752 <_svfiprintf_r+0x1a6>
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0c6      	beq.n	80046dc <_svfiprintf_r+0x130>
 800474e:	9105      	str	r1, [sp, #20]
 8004750:	e7c4      	b.n	80046dc <_svfiprintf_r+0x130>
 8004752:	4604      	mov	r4, r0
 8004754:	2301      	movs	r3, #1
 8004756:	fb0c 2101 	mla	r1, ip, r1, r2
 800475a:	e7f0      	b.n	800473e <_svfiprintf_r+0x192>
 800475c:	ab03      	add	r3, sp, #12
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	462a      	mov	r2, r5
 8004762:	4638      	mov	r0, r7
 8004764:	4b0f      	ldr	r3, [pc, #60]	; (80047a4 <_svfiprintf_r+0x1f8>)
 8004766:	a904      	add	r1, sp, #16
 8004768:	f3af 8000 	nop.w
 800476c:	1c42      	adds	r2, r0, #1
 800476e:	4606      	mov	r6, r0
 8004770:	d1d6      	bne.n	8004720 <_svfiprintf_r+0x174>
 8004772:	89ab      	ldrh	r3, [r5, #12]
 8004774:	065b      	lsls	r3, r3, #25
 8004776:	f53f af2d 	bmi.w	80045d4 <_svfiprintf_r+0x28>
 800477a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800477c:	b01d      	add	sp, #116	; 0x74
 800477e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004782:	ab03      	add	r3, sp, #12
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	462a      	mov	r2, r5
 8004788:	4638      	mov	r0, r7
 800478a:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <_svfiprintf_r+0x1f8>)
 800478c:	a904      	add	r1, sp, #16
 800478e:	f000 f87d 	bl	800488c <_printf_i>
 8004792:	e7eb      	b.n	800476c <_svfiprintf_r+0x1c0>
 8004794:	08004c36 	.word	0x08004c36
 8004798:	08004c3c 	.word	0x08004c3c
 800479c:	08004c40 	.word	0x08004c40
 80047a0:	00000000 	.word	0x00000000
 80047a4:	080044f9 	.word	0x080044f9

080047a8 <_printf_common>:
 80047a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047ac:	4616      	mov	r6, r2
 80047ae:	4699      	mov	r9, r3
 80047b0:	688a      	ldr	r2, [r1, #8]
 80047b2:	690b      	ldr	r3, [r1, #16]
 80047b4:	4607      	mov	r7, r0
 80047b6:	4293      	cmp	r3, r2
 80047b8:	bfb8      	it	lt
 80047ba:	4613      	movlt	r3, r2
 80047bc:	6033      	str	r3, [r6, #0]
 80047be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047c2:	460c      	mov	r4, r1
 80047c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047c8:	b10a      	cbz	r2, 80047ce <_printf_common+0x26>
 80047ca:	3301      	adds	r3, #1
 80047cc:	6033      	str	r3, [r6, #0]
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	0699      	lsls	r1, r3, #26
 80047d2:	bf42      	ittt	mi
 80047d4:	6833      	ldrmi	r3, [r6, #0]
 80047d6:	3302      	addmi	r3, #2
 80047d8:	6033      	strmi	r3, [r6, #0]
 80047da:	6825      	ldr	r5, [r4, #0]
 80047dc:	f015 0506 	ands.w	r5, r5, #6
 80047e0:	d106      	bne.n	80047f0 <_printf_common+0x48>
 80047e2:	f104 0a19 	add.w	sl, r4, #25
 80047e6:	68e3      	ldr	r3, [r4, #12]
 80047e8:	6832      	ldr	r2, [r6, #0]
 80047ea:	1a9b      	subs	r3, r3, r2
 80047ec:	42ab      	cmp	r3, r5
 80047ee:	dc2b      	bgt.n	8004848 <_printf_common+0xa0>
 80047f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047f4:	1e13      	subs	r3, r2, #0
 80047f6:	6822      	ldr	r2, [r4, #0]
 80047f8:	bf18      	it	ne
 80047fa:	2301      	movne	r3, #1
 80047fc:	0692      	lsls	r2, r2, #26
 80047fe:	d430      	bmi.n	8004862 <_printf_common+0xba>
 8004800:	4649      	mov	r1, r9
 8004802:	4638      	mov	r0, r7
 8004804:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004808:	47c0      	blx	r8
 800480a:	3001      	adds	r0, #1
 800480c:	d023      	beq.n	8004856 <_printf_common+0xae>
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	6922      	ldr	r2, [r4, #16]
 8004812:	f003 0306 	and.w	r3, r3, #6
 8004816:	2b04      	cmp	r3, #4
 8004818:	bf14      	ite	ne
 800481a:	2500      	movne	r5, #0
 800481c:	6833      	ldreq	r3, [r6, #0]
 800481e:	f04f 0600 	mov.w	r6, #0
 8004822:	bf08      	it	eq
 8004824:	68e5      	ldreq	r5, [r4, #12]
 8004826:	f104 041a 	add.w	r4, r4, #26
 800482a:	bf08      	it	eq
 800482c:	1aed      	subeq	r5, r5, r3
 800482e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004832:	bf08      	it	eq
 8004834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004838:	4293      	cmp	r3, r2
 800483a:	bfc4      	itt	gt
 800483c:	1a9b      	subgt	r3, r3, r2
 800483e:	18ed      	addgt	r5, r5, r3
 8004840:	42b5      	cmp	r5, r6
 8004842:	d11a      	bne.n	800487a <_printf_common+0xd2>
 8004844:	2000      	movs	r0, #0
 8004846:	e008      	b.n	800485a <_printf_common+0xb2>
 8004848:	2301      	movs	r3, #1
 800484a:	4652      	mov	r2, sl
 800484c:	4649      	mov	r1, r9
 800484e:	4638      	mov	r0, r7
 8004850:	47c0      	blx	r8
 8004852:	3001      	adds	r0, #1
 8004854:	d103      	bne.n	800485e <_printf_common+0xb6>
 8004856:	f04f 30ff 	mov.w	r0, #4294967295
 800485a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800485e:	3501      	adds	r5, #1
 8004860:	e7c1      	b.n	80047e6 <_printf_common+0x3e>
 8004862:	2030      	movs	r0, #48	; 0x30
 8004864:	18e1      	adds	r1, r4, r3
 8004866:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004870:	4422      	add	r2, r4
 8004872:	3302      	adds	r3, #2
 8004874:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004878:	e7c2      	b.n	8004800 <_printf_common+0x58>
 800487a:	2301      	movs	r3, #1
 800487c:	4622      	mov	r2, r4
 800487e:	4649      	mov	r1, r9
 8004880:	4638      	mov	r0, r7
 8004882:	47c0      	blx	r8
 8004884:	3001      	adds	r0, #1
 8004886:	d0e6      	beq.n	8004856 <_printf_common+0xae>
 8004888:	3601      	adds	r6, #1
 800488a:	e7d9      	b.n	8004840 <_printf_common+0x98>

0800488c <_printf_i>:
 800488c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004890:	7e0f      	ldrb	r7, [r1, #24]
 8004892:	4691      	mov	r9, r2
 8004894:	2f78      	cmp	r7, #120	; 0x78
 8004896:	4680      	mov	r8, r0
 8004898:	460c      	mov	r4, r1
 800489a:	469a      	mov	sl, r3
 800489c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800489e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048a2:	d807      	bhi.n	80048b4 <_printf_i+0x28>
 80048a4:	2f62      	cmp	r7, #98	; 0x62
 80048a6:	d80a      	bhi.n	80048be <_printf_i+0x32>
 80048a8:	2f00      	cmp	r7, #0
 80048aa:	f000 80d5 	beq.w	8004a58 <_printf_i+0x1cc>
 80048ae:	2f58      	cmp	r7, #88	; 0x58
 80048b0:	f000 80c1 	beq.w	8004a36 <_printf_i+0x1aa>
 80048b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048bc:	e03a      	b.n	8004934 <_printf_i+0xa8>
 80048be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048c2:	2b15      	cmp	r3, #21
 80048c4:	d8f6      	bhi.n	80048b4 <_printf_i+0x28>
 80048c6:	a101      	add	r1, pc, #4	; (adr r1, 80048cc <_printf_i+0x40>)
 80048c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048cc:	08004925 	.word	0x08004925
 80048d0:	08004939 	.word	0x08004939
 80048d4:	080048b5 	.word	0x080048b5
 80048d8:	080048b5 	.word	0x080048b5
 80048dc:	080048b5 	.word	0x080048b5
 80048e0:	080048b5 	.word	0x080048b5
 80048e4:	08004939 	.word	0x08004939
 80048e8:	080048b5 	.word	0x080048b5
 80048ec:	080048b5 	.word	0x080048b5
 80048f0:	080048b5 	.word	0x080048b5
 80048f4:	080048b5 	.word	0x080048b5
 80048f8:	08004a3f 	.word	0x08004a3f
 80048fc:	08004965 	.word	0x08004965
 8004900:	080049f9 	.word	0x080049f9
 8004904:	080048b5 	.word	0x080048b5
 8004908:	080048b5 	.word	0x080048b5
 800490c:	08004a61 	.word	0x08004a61
 8004910:	080048b5 	.word	0x080048b5
 8004914:	08004965 	.word	0x08004965
 8004918:	080048b5 	.word	0x080048b5
 800491c:	080048b5 	.word	0x080048b5
 8004920:	08004a01 	.word	0x08004a01
 8004924:	682b      	ldr	r3, [r5, #0]
 8004926:	1d1a      	adds	r2, r3, #4
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	602a      	str	r2, [r5, #0]
 800492c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004930:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004934:	2301      	movs	r3, #1
 8004936:	e0a0      	b.n	8004a7a <_printf_i+0x1ee>
 8004938:	6820      	ldr	r0, [r4, #0]
 800493a:	682b      	ldr	r3, [r5, #0]
 800493c:	0607      	lsls	r7, r0, #24
 800493e:	f103 0104 	add.w	r1, r3, #4
 8004942:	6029      	str	r1, [r5, #0]
 8004944:	d501      	bpl.n	800494a <_printf_i+0xbe>
 8004946:	681e      	ldr	r6, [r3, #0]
 8004948:	e003      	b.n	8004952 <_printf_i+0xc6>
 800494a:	0646      	lsls	r6, r0, #25
 800494c:	d5fb      	bpl.n	8004946 <_printf_i+0xba>
 800494e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004952:	2e00      	cmp	r6, #0
 8004954:	da03      	bge.n	800495e <_printf_i+0xd2>
 8004956:	232d      	movs	r3, #45	; 0x2d
 8004958:	4276      	negs	r6, r6
 800495a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800495e:	230a      	movs	r3, #10
 8004960:	4859      	ldr	r0, [pc, #356]	; (8004ac8 <_printf_i+0x23c>)
 8004962:	e012      	b.n	800498a <_printf_i+0xfe>
 8004964:	682b      	ldr	r3, [r5, #0]
 8004966:	6820      	ldr	r0, [r4, #0]
 8004968:	1d19      	adds	r1, r3, #4
 800496a:	6029      	str	r1, [r5, #0]
 800496c:	0605      	lsls	r5, r0, #24
 800496e:	d501      	bpl.n	8004974 <_printf_i+0xe8>
 8004970:	681e      	ldr	r6, [r3, #0]
 8004972:	e002      	b.n	800497a <_printf_i+0xee>
 8004974:	0641      	lsls	r1, r0, #25
 8004976:	d5fb      	bpl.n	8004970 <_printf_i+0xe4>
 8004978:	881e      	ldrh	r6, [r3, #0]
 800497a:	2f6f      	cmp	r7, #111	; 0x6f
 800497c:	bf0c      	ite	eq
 800497e:	2308      	moveq	r3, #8
 8004980:	230a      	movne	r3, #10
 8004982:	4851      	ldr	r0, [pc, #324]	; (8004ac8 <_printf_i+0x23c>)
 8004984:	2100      	movs	r1, #0
 8004986:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800498a:	6865      	ldr	r5, [r4, #4]
 800498c:	2d00      	cmp	r5, #0
 800498e:	bfa8      	it	ge
 8004990:	6821      	ldrge	r1, [r4, #0]
 8004992:	60a5      	str	r5, [r4, #8]
 8004994:	bfa4      	itt	ge
 8004996:	f021 0104 	bicge.w	r1, r1, #4
 800499a:	6021      	strge	r1, [r4, #0]
 800499c:	b90e      	cbnz	r6, 80049a2 <_printf_i+0x116>
 800499e:	2d00      	cmp	r5, #0
 80049a0:	d04b      	beq.n	8004a3a <_printf_i+0x1ae>
 80049a2:	4615      	mov	r5, r2
 80049a4:	fbb6 f1f3 	udiv	r1, r6, r3
 80049a8:	fb03 6711 	mls	r7, r3, r1, r6
 80049ac:	5dc7      	ldrb	r7, [r0, r7]
 80049ae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049b2:	4637      	mov	r7, r6
 80049b4:	42bb      	cmp	r3, r7
 80049b6:	460e      	mov	r6, r1
 80049b8:	d9f4      	bls.n	80049a4 <_printf_i+0x118>
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	d10b      	bne.n	80049d6 <_printf_i+0x14a>
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	07de      	lsls	r6, r3, #31
 80049c2:	d508      	bpl.n	80049d6 <_printf_i+0x14a>
 80049c4:	6923      	ldr	r3, [r4, #16]
 80049c6:	6861      	ldr	r1, [r4, #4]
 80049c8:	4299      	cmp	r1, r3
 80049ca:	bfde      	ittt	le
 80049cc:	2330      	movle	r3, #48	; 0x30
 80049ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049d6:	1b52      	subs	r2, r2, r5
 80049d8:	6122      	str	r2, [r4, #16]
 80049da:	464b      	mov	r3, r9
 80049dc:	4621      	mov	r1, r4
 80049de:	4640      	mov	r0, r8
 80049e0:	f8cd a000 	str.w	sl, [sp]
 80049e4:	aa03      	add	r2, sp, #12
 80049e6:	f7ff fedf 	bl	80047a8 <_printf_common>
 80049ea:	3001      	adds	r0, #1
 80049ec:	d14a      	bne.n	8004a84 <_printf_i+0x1f8>
 80049ee:	f04f 30ff 	mov.w	r0, #4294967295
 80049f2:	b004      	add	sp, #16
 80049f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	f043 0320 	orr.w	r3, r3, #32
 80049fe:	6023      	str	r3, [r4, #0]
 8004a00:	2778      	movs	r7, #120	; 0x78
 8004a02:	4832      	ldr	r0, [pc, #200]	; (8004acc <_printf_i+0x240>)
 8004a04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a08:	6823      	ldr	r3, [r4, #0]
 8004a0a:	6829      	ldr	r1, [r5, #0]
 8004a0c:	061f      	lsls	r7, r3, #24
 8004a0e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a12:	d402      	bmi.n	8004a1a <_printf_i+0x18e>
 8004a14:	065f      	lsls	r7, r3, #25
 8004a16:	bf48      	it	mi
 8004a18:	b2b6      	uxthmi	r6, r6
 8004a1a:	07df      	lsls	r7, r3, #31
 8004a1c:	bf48      	it	mi
 8004a1e:	f043 0320 	orrmi.w	r3, r3, #32
 8004a22:	6029      	str	r1, [r5, #0]
 8004a24:	bf48      	it	mi
 8004a26:	6023      	strmi	r3, [r4, #0]
 8004a28:	b91e      	cbnz	r6, 8004a32 <_printf_i+0x1a6>
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	f023 0320 	bic.w	r3, r3, #32
 8004a30:	6023      	str	r3, [r4, #0]
 8004a32:	2310      	movs	r3, #16
 8004a34:	e7a6      	b.n	8004984 <_printf_i+0xf8>
 8004a36:	4824      	ldr	r0, [pc, #144]	; (8004ac8 <_printf_i+0x23c>)
 8004a38:	e7e4      	b.n	8004a04 <_printf_i+0x178>
 8004a3a:	4615      	mov	r5, r2
 8004a3c:	e7bd      	b.n	80049ba <_printf_i+0x12e>
 8004a3e:	682b      	ldr	r3, [r5, #0]
 8004a40:	6826      	ldr	r6, [r4, #0]
 8004a42:	1d18      	adds	r0, r3, #4
 8004a44:	6961      	ldr	r1, [r4, #20]
 8004a46:	6028      	str	r0, [r5, #0]
 8004a48:	0635      	lsls	r5, r6, #24
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	d501      	bpl.n	8004a52 <_printf_i+0x1c6>
 8004a4e:	6019      	str	r1, [r3, #0]
 8004a50:	e002      	b.n	8004a58 <_printf_i+0x1cc>
 8004a52:	0670      	lsls	r0, r6, #25
 8004a54:	d5fb      	bpl.n	8004a4e <_printf_i+0x1c2>
 8004a56:	8019      	strh	r1, [r3, #0]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	4615      	mov	r5, r2
 8004a5c:	6123      	str	r3, [r4, #16]
 8004a5e:	e7bc      	b.n	80049da <_printf_i+0x14e>
 8004a60:	682b      	ldr	r3, [r5, #0]
 8004a62:	2100      	movs	r1, #0
 8004a64:	1d1a      	adds	r2, r3, #4
 8004a66:	602a      	str	r2, [r5, #0]
 8004a68:	681d      	ldr	r5, [r3, #0]
 8004a6a:	6862      	ldr	r2, [r4, #4]
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	f000 f859 	bl	8004b24 <memchr>
 8004a72:	b108      	cbz	r0, 8004a78 <_printf_i+0x1ec>
 8004a74:	1b40      	subs	r0, r0, r5
 8004a76:	6060      	str	r0, [r4, #4]
 8004a78:	6863      	ldr	r3, [r4, #4]
 8004a7a:	6123      	str	r3, [r4, #16]
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a82:	e7aa      	b.n	80049da <_printf_i+0x14e>
 8004a84:	462a      	mov	r2, r5
 8004a86:	4649      	mov	r1, r9
 8004a88:	4640      	mov	r0, r8
 8004a8a:	6923      	ldr	r3, [r4, #16]
 8004a8c:	47d0      	blx	sl
 8004a8e:	3001      	adds	r0, #1
 8004a90:	d0ad      	beq.n	80049ee <_printf_i+0x162>
 8004a92:	6823      	ldr	r3, [r4, #0]
 8004a94:	079b      	lsls	r3, r3, #30
 8004a96:	d413      	bmi.n	8004ac0 <_printf_i+0x234>
 8004a98:	68e0      	ldr	r0, [r4, #12]
 8004a9a:	9b03      	ldr	r3, [sp, #12]
 8004a9c:	4298      	cmp	r0, r3
 8004a9e:	bfb8      	it	lt
 8004aa0:	4618      	movlt	r0, r3
 8004aa2:	e7a6      	b.n	80049f2 <_printf_i+0x166>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	4632      	mov	r2, r6
 8004aa8:	4649      	mov	r1, r9
 8004aaa:	4640      	mov	r0, r8
 8004aac:	47d0      	blx	sl
 8004aae:	3001      	adds	r0, #1
 8004ab0:	d09d      	beq.n	80049ee <_printf_i+0x162>
 8004ab2:	3501      	adds	r5, #1
 8004ab4:	68e3      	ldr	r3, [r4, #12]
 8004ab6:	9903      	ldr	r1, [sp, #12]
 8004ab8:	1a5b      	subs	r3, r3, r1
 8004aba:	42ab      	cmp	r3, r5
 8004abc:	dcf2      	bgt.n	8004aa4 <_printf_i+0x218>
 8004abe:	e7eb      	b.n	8004a98 <_printf_i+0x20c>
 8004ac0:	2500      	movs	r5, #0
 8004ac2:	f104 0619 	add.w	r6, r4, #25
 8004ac6:	e7f5      	b.n	8004ab4 <_printf_i+0x228>
 8004ac8:	08004c47 	.word	0x08004c47
 8004acc:	08004c58 	.word	0x08004c58

08004ad0 <memmove>:
 8004ad0:	4288      	cmp	r0, r1
 8004ad2:	b510      	push	{r4, lr}
 8004ad4:	eb01 0402 	add.w	r4, r1, r2
 8004ad8:	d902      	bls.n	8004ae0 <memmove+0x10>
 8004ada:	4284      	cmp	r4, r0
 8004adc:	4623      	mov	r3, r4
 8004ade:	d807      	bhi.n	8004af0 <memmove+0x20>
 8004ae0:	1e43      	subs	r3, r0, #1
 8004ae2:	42a1      	cmp	r1, r4
 8004ae4:	d008      	beq.n	8004af8 <memmove+0x28>
 8004ae6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004aea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004aee:	e7f8      	b.n	8004ae2 <memmove+0x12>
 8004af0:	4601      	mov	r1, r0
 8004af2:	4402      	add	r2, r0
 8004af4:	428a      	cmp	r2, r1
 8004af6:	d100      	bne.n	8004afa <memmove+0x2a>
 8004af8:	bd10      	pop	{r4, pc}
 8004afa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004afe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b02:	e7f7      	b.n	8004af4 <memmove+0x24>

08004b04 <_sbrk_r>:
 8004b04:	b538      	push	{r3, r4, r5, lr}
 8004b06:	2300      	movs	r3, #0
 8004b08:	4d05      	ldr	r5, [pc, #20]	; (8004b20 <_sbrk_r+0x1c>)
 8004b0a:	4604      	mov	r4, r0
 8004b0c:	4608      	mov	r0, r1
 8004b0e:	602b      	str	r3, [r5, #0]
 8004b10:	f7fc fc0e 	bl	8001330 <_sbrk>
 8004b14:	1c43      	adds	r3, r0, #1
 8004b16:	d102      	bne.n	8004b1e <_sbrk_r+0x1a>
 8004b18:	682b      	ldr	r3, [r5, #0]
 8004b1a:	b103      	cbz	r3, 8004b1e <_sbrk_r+0x1a>
 8004b1c:	6023      	str	r3, [r4, #0]
 8004b1e:	bd38      	pop	{r3, r4, r5, pc}
 8004b20:	20000298 	.word	0x20000298

08004b24 <memchr>:
 8004b24:	4603      	mov	r3, r0
 8004b26:	b510      	push	{r4, lr}
 8004b28:	b2c9      	uxtb	r1, r1
 8004b2a:	4402      	add	r2, r0
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	d101      	bne.n	8004b36 <memchr+0x12>
 8004b32:	2000      	movs	r0, #0
 8004b34:	e003      	b.n	8004b3e <memchr+0x1a>
 8004b36:	7804      	ldrb	r4, [r0, #0]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	428c      	cmp	r4, r1
 8004b3c:	d1f6      	bne.n	8004b2c <memchr+0x8>
 8004b3e:	bd10      	pop	{r4, pc}

08004b40 <memcpy>:
 8004b40:	440a      	add	r2, r1
 8004b42:	4291      	cmp	r1, r2
 8004b44:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b48:	d100      	bne.n	8004b4c <memcpy+0xc>
 8004b4a:	4770      	bx	lr
 8004b4c:	b510      	push	{r4, lr}
 8004b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b52:	4291      	cmp	r1, r2
 8004b54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b58:	d1f9      	bne.n	8004b4e <memcpy+0xe>
 8004b5a:	bd10      	pop	{r4, pc}

08004b5c <_realloc_r>:
 8004b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b60:	4680      	mov	r8, r0
 8004b62:	4614      	mov	r4, r2
 8004b64:	460e      	mov	r6, r1
 8004b66:	b921      	cbnz	r1, 8004b72 <_realloc_r+0x16>
 8004b68:	4611      	mov	r1, r2
 8004b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b6e:	f7ff bc37 	b.w	80043e0 <_malloc_r>
 8004b72:	b92a      	cbnz	r2, 8004b80 <_realloc_r+0x24>
 8004b74:	f7ff fbcc 	bl	8004310 <_free_r>
 8004b78:	4625      	mov	r5, r4
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b80:	f000 f81b 	bl	8004bba <_malloc_usable_size_r>
 8004b84:	4284      	cmp	r4, r0
 8004b86:	4607      	mov	r7, r0
 8004b88:	d802      	bhi.n	8004b90 <_realloc_r+0x34>
 8004b8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b8e:	d812      	bhi.n	8004bb6 <_realloc_r+0x5a>
 8004b90:	4621      	mov	r1, r4
 8004b92:	4640      	mov	r0, r8
 8004b94:	f7ff fc24 	bl	80043e0 <_malloc_r>
 8004b98:	4605      	mov	r5, r0
 8004b9a:	2800      	cmp	r0, #0
 8004b9c:	d0ed      	beq.n	8004b7a <_realloc_r+0x1e>
 8004b9e:	42bc      	cmp	r4, r7
 8004ba0:	4622      	mov	r2, r4
 8004ba2:	4631      	mov	r1, r6
 8004ba4:	bf28      	it	cs
 8004ba6:	463a      	movcs	r2, r7
 8004ba8:	f7ff ffca 	bl	8004b40 <memcpy>
 8004bac:	4631      	mov	r1, r6
 8004bae:	4640      	mov	r0, r8
 8004bb0:	f7ff fbae 	bl	8004310 <_free_r>
 8004bb4:	e7e1      	b.n	8004b7a <_realloc_r+0x1e>
 8004bb6:	4635      	mov	r5, r6
 8004bb8:	e7df      	b.n	8004b7a <_realloc_r+0x1e>

08004bba <_malloc_usable_size_r>:
 8004bba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bbe:	1f18      	subs	r0, r3, #4
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	bfbc      	itt	lt
 8004bc4:	580b      	ldrlt	r3, [r1, r0]
 8004bc6:	18c0      	addlt	r0, r0, r3
 8004bc8:	4770      	bx	lr
	...

08004bcc <_init>:
 8004bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bce:	bf00      	nop
 8004bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bd2:	bc08      	pop	{r3}
 8004bd4:	469e      	mov	lr, r3
 8004bd6:	4770      	bx	lr

08004bd8 <_fini>:
 8004bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bda:	bf00      	nop
 8004bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bde:	bc08      	pop	{r3}
 8004be0:	469e      	mov	lr, r3
 8004be2:	4770      	bx	lr
